// Code generated by go-bindata.
// sources:
// templates/assume-role-policy-document.json
// templates/dot-kube-config.template
// templates/kube-master-iam-policy.json
// templates/kube-minion-iam-policy.json
// templates/kube_dns.yaml.template
// templates/master-openssl.cnf.template
// templates/master-user-data.template
// templates/minion-openssl.cnf.template
// templates/minion-user-data.template
// k8s_certs/generate_admin_keypair.sh
// k8s_certs/generate_api_keypair.sh
// k8s_certs/generate_ca.sh
// k8s_certs/generate_minion_keypair.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAssumeRolePolicyDocumentJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x8e\xbd\xaa\xc3\x30\x0c\x85\xf7\x3c\x85\xd1\x7c\x13\x12\x2f\x17\xb2\x79\xe8\x5e\x5a\xe8\x52\x3a\x18\xa1\x80\xc1\x3f\xc5\x72\x1b\x68\xf0\xbb\xd7\x76\xd3\x2e\x67\x38\xdf\xa7\x83\xb6\x4e\x08\xb8\x50\x64\x13\x3c\xcc\x02\xe4\x38\xc9\x7e\x1a\xfb\xe9\x1f\xfe\x2a\x3a\x27\x9d\xc8\x91\x4f\x05\x5e\x4b\x21\xc4\xd6\xb2\xa0\xc3\xb2\x10\xd6\x1e\x94\xb5\x61\x6d\x7e\x03\xc7\x68\x3c\x9a\xbb\xb6\x85\x7d\xed\x3a\x45\xf1\x69\x90\xea\x01\xa1\x1c\xb4\xd3\xaf\xe0\xf5\xca\x03\x06\x07\xbb\x96\x7f\x23\x0a\xd3\xfe\x12\x27\x9e\x15\xf3\xc3\xd1\x29\x58\xfa\x98\xb9\xe4\xad\xcb\xdd\x3b\x00\x00\xff\xff\x83\x74\x15\x01\xbf\x00\x00\x00")

func templatesAssumeRolePolicyDocumentJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesAssumeRolePolicyDocumentJson,
		"templates/assume-role-policy-document.json",
	)
}

func templatesAssumeRolePolicyDocumentJson() (*asset, error) {
	bytes, err := templatesAssumeRolePolicyDocumentJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/assume-role-policy-document.json", size: 191, mode: os.FileMode(420), modTime: time.Unix(1468525626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDotKubeConfigTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\x41\x6e\x83\x30\x10\xbc\xfb\x15\xfe\x00\x95\x7a\xf5\xad\xe2\xd8\x56\xaa\x2a\xb5\xd7\xca\x75\x96\xb0\x22\xb1\xd1\x7a\x4d\x82\x10\x7f\x8f\x6d\x8c\x82\x10\x9c\x96\x9d\xd9\x99\xf1\xe8\x1e\x7f\x81\x3c\x3a\xab\xe4\xf0\x2a\xcc\x25\x78\x8e\xff\x4a\x54\xb2\xcc\x4a\xc8\xf8\x19\x20\xc6\x06\x8d\x66\xa8\x74\xe0\xd6\x11\xf2\xa8\xe4\x34\xbd\xd4\x11\x79\x5b\x37\x5f\x9a\xdb\x79\xce\x17\x1e\x68\x88\xd7\x89\xf2\xa9\x93\xd0\xcf\xf7\x47\x86\xac\xbe\x82\x92\xfa\xe6\xff\xba\xf0\x0f\x64\x81\xc1\x0b\xe3\x2c\xc3\x9d\x17\xe3\x65\x2e\xc6\x25\xc5\xfe\x20\x61\xc1\x1f\x02\xc7\x06\x81\x08\x2c\x57\xab\xf8\x1e\xef\xd0\x9e\x94\xac\x9d\x6d\xf0\x2c\x7a\x82\x06\x22\xdd\x80\x8f\x0f\x98\x45\x32\xca\xd1\x0e\xa5\x4b\x90\x12\x17\xb3\xcb\xb3\xae\xa5\xa4\xbc\x4e\x55\x6d\x1a\x2a\xdc\x0e\xc6\x0d\xe7\x1d\xd6\x12\x1f\x01\x00\x00\xff\xff\xe8\xf5\x64\x7d\x9b\x01\x00\x00")

func templatesDotKubeConfigTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesDotKubeConfigTemplate,
		"templates/dot-kube-config.template",
	)
}

func templatesDotKubeConfigTemplate() (*asset, error) {
	bytes, err := templatesDotKubeConfigTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot-kube-config.template", size: 411, mode: os.FileMode(420), modTime: time.Unix(1468525626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesKubeMasterIamPolicyJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x8e\x3d\x8a\xc3\x30\x10\x46\x7b\x9f\x42\x4c\x69\xec\x5d\xff\x14\x0b\xea\xbc\xb0\x17\x58\x43\x1a\x93\x42\x99\x8c\x83\x89\x22\x81\x25\xe3\x42\xe8\xee\x19\x2b\x26\x55\xaa\x40\x1a\x21\xde\xfb\x78\x52\xc8\x84\x80\x03\xcd\x6e\xb2\x06\xa4\x80\xa6\xaa\x9b\xb2\xae\xca\xfa\x07\x8a\x4d\xf5\x5e\x79\xba\x91\xf1\x2c\x07\x06\x42\x84\x74\xb2\xfa\x1b\x47\xc2\x8d\x43\xa7\xb5\x5d\xd3\x3e\x89\x0e\xfd\xa3\x36\x00\x61\x23\x73\x38\x3e\xd5\x3f\x39\xbb\xcc\x48\x49\xb2\x48\x3c\x16\x6f\x84\xb5\x72\x7e\x42\x6d\xd5\xf9\xa4\xb4\x32\x38\x99\xcb\x27\x5e\x02\xd7\x72\xf6\x65\x75\x67\x4c\xd5\x6c\xa4\x5a\x9d\xe4\xad\x94\x21\x7c\xf5\xed\xef\x82\x57\xf2\x31\x7e\xe7\xb0\xcf\xf6\x0f\x64\xdb\x2d\x66\xf7\x00\x00\x00\xff\xff\x02\x3d\xd4\xdf\x77\x01\x00\x00")

func templatesKubeMasterIamPolicyJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesKubeMasterIamPolicyJson,
		"templates/kube-master-iam-policy.json",
	)
}

func templatesKubeMasterIamPolicyJson() (*asset, error) {
	bytes, err := templatesKubeMasterIamPolicyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kube-master-iam-policy.json", size: 375, mode: os.FileMode(420), modTime: time.Unix(1468619964, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesKubeMinionIamPolicyJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\x41\x4b\xfb\x40\x10\xc5\xef\xf9\x14\x61\x8f\xa5\xfd\xff\x9b\xf4\x20\xec\x2d\x35\x2a\x42\x0f\xd2\x6a\x2f\xe2\x61\xbb\x4e\xcd\x92\x4d\x46\x76\x27\x86\x18\xf2\xdd\xdd\x2c\x31\x4a\x5b\x04\x85\x5e\x12\x78\xef\x37\x6f\x86\x9d\x69\x83\x30\x64\x5b\x30\x56\x61\xc9\x78\xc8\xe2\x79\x14\xcf\xa2\xf9\x2c\xba\x60\xd3\xde\xda\x90\x20\x28\xa0\x24\x67\x3e\x3a\x21\x0c\x5b\xff\x75\xd6\xd5\x7e\x0f\xb2\xd7\x59\xa2\x35\xd6\x9e\xf7\x46\x22\x69\x48\xb3\x0b\x3e\xf9\xd2\xd7\x60\xb1\x32\x12\xc6\x28\xaf\x0a\x53\x72\x51\x5b\xee\x58\xce\xdb\xf6\xdf\x66\xb1\xac\x64\x0e\xd4\x75\xff\x27\x6c\xc0\x9e\xfc\xbf\x9b\xfe\x7a\x00\x90\x31\x4f\xc1\x4a\xa3\x76\x70\x7a\x12\x36\x34\xf9\x63\x78\x42\x24\x64\xb6\x45\x5d\x15\x70\x8e\xfc\x14\xce\x96\xff\x6d\x07\x20\x0d\xbf\x01\x4a\x2a\xca\xd0\xa8\x77\xd1\x13\xf7\x98\x43\x39\x96\x0d\xd0\x52\x90\xcc\x2e\x33\x90\xf9\x4a\x34\x60\x92\x37\xa1\xb4\xd8\x29\xad\xa8\x39\x44\x5d\x5e\x8a\x75\xa9\x51\x3c\x3f\x18\x7d\x8d\xc6\x57\x9c\xa0\xd6\xf0\x8a\x56\x11\x9a\xe6\x0e\xb5\x92\x47\x41\x9f\xfb\x1b\x39\x05\xf6\x90\x59\x29\x4b\xb7\x85\x78\x39\x76\xfc\xc4\xae\x8b\x77\xc7\x7b\xfa\xf1\x25\x83\xfe\xe0\xba\xe0\x23\x00\x00\xff\xff\x2f\xd3\xee\x21\x1b\x03\x00\x00")

func templatesKubeMinionIamPolicyJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesKubeMinionIamPolicyJson,
		"templates/kube-minion-iam-policy.json",
	)
}

func templatesKubeMinionIamPolicyJson() (*asset, error) {
	bytes, err := templatesKubeMinionIamPolicyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kube-minion-iam-policy.json", size: 795, mode: os.FileMode(420), modTime: time.Unix(1468619970, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesKube_dnsYamlTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x49\x6f\xeb\x36\x10\xbe\xfb\x57\x10\xee\xb5\xd4\xe2\x24\x2f\xae\x00\xf7\xf2\x0c\xb4\x45\x9b\xc2\x78\xc9\xeb\xb5\xa0\xa9\xb1\x4d\x98\x12\x55\x92\x32\xea\x06\xf9\xef\x1d\x6a\x0b\xe9\x38\x5e\x5e\x73\x28\x73\x08\x34\x1b\x67\xf9\x66\x38\x66\x95\xf8\x03\xb4\x11\xaa\xcc\xc8\x2e\x1d\x6d\x45\x99\x67\xe4\x11\xf4\x4e\x70\x18\x15\x60\x59\xce\x2c\xcb\x46\x84\x94\xac\x80\x8c\x6c\xeb\x25\xd0\xbc\x34\x1d\xc1\x54\x8c\xf7\x54\xb3\x37\x16\x0a\x64\x48\xb6\x04\x69\x9c\x0e\x21\xdb\xa9\xa1\xac\xaa\x02\x45\xd2\x7c\xe8\x12\x2c\x98\x48\xa8\x98\xcb\x1a\x35\x35\x35\xed\xad\x19\x19\x5b\x5d\xc3\xf8\x88\x64\xeb\xc3\xf8\x57\x24\xce\x7f\x7f\x1c\x8f\x4c\x05\xdc\xdd\x63\x40\x02\xb7\x4a\xbf\x7f\x67\x77\xc7\x2f\x8b\x8c\xa4\x49\xe4\xfe\xd2\x04\xc9\x95\xd2\xb6\xf1\x94\x76\xf1\xf5\x1e\x3a\x46\x46\xee\x6e\xda\x0f\xad\xac\xe2\x4a\x66\xe4\xeb\x7c\x11\x0a\x53\xcb\xab\x53\x0a\x4f\x9f\x17\xa3\x11\xa5\x74\x34\x3a\x9a\xe8\x2f\x50\x49\xc1\x99\x45\xea\x67\x55\x5a\xad\xa4\x04\x7d\x22\xed\x74\x97\xa6\xff\x2d\xf5\xbb\x57\x1f\xd2\x2b\x6a\xd1\x67\x5a\xb7\x0e\x1b\x4c\xe3\x45\x79\x7f\x73\x21\xfa\x59\x49\x66\xa1\x55\xf1\x23\x75\xc7\xf7\xff\x7d\x93\x47\xe3\xb8\x0e\x57\x7d\x3c\xee\x70\xcc\x3c\x13\x25\x1a\xec\x29\x7d\x81\xc1\xf2\x7c\x30\x2e\x0a\xb6\x46\xda\x9a\x6b\x67\x7c\xad\xd4\x5a\xc2\x9f\xaf\xba\xb1\x13\xa6\xac\xc8\x3f\xdd\x66\x93\x68\x12\xbd\x7a\xa5\xc1\xa8\x5a\x73\xf0\xe2\xc2\x48\x45\x21\x6c\x40\x41\x47\xaa\xda\xc1\x33\x29\x02\x6a\x01\x85\xd2\x7b\xc4\x56\x92\x3c\x08\x8f\xa3\xe1\xaf\x1a\xcc\xb5\x36\x3c\x13\x5c\x15\x05\x43\x14\x0e\x04\x4a\xe2\xda\xe8\x58\x2a\xce\x64\xbc\x14\x65\x1c\xc4\x4f\x09\x75\xa5\xa2\xb9\xd0\xbe\xc6\x8e\xe9\x46\x2e\x76\x4c\x5f\x58\x0a\xcc\x7e\x49\xb9\x14\x50\x5a\x5a\x6b\x69\x3c\xee\xc6\xda\x2a\x8b\xe3\x74\x72\xdf\x36\x63\x36\xb9\xb9\xff\xe1\xfb\x37\xd4\xdb\x24\x49\x7d\x9b\x2c\xc7\xba\x5b\x61\xe0\x63\xcd\x8a\x52\x58\xc1\x24\xed\x11\x63\xd5\x16\x4a\x4f\xc0\x6c\xf7\xae\xf9\x82\x74\xec\x94\xac\x0b\x78\x50\x75\xe9\x97\xc0\x47\x0e\x35\xd8\x1a\x88\x19\xaf\x12\x85\x13\x5f\x30\xbb\xc9\x8e\x27\x8e\x7a\xfd\x3e\xc1\x5b\x2f\x06\x5f\xaf\x90\xa5\x51\x7a\xfb\xd1\xc8\x9b\x7c\x34\xf2\xa4\xd8\x41\x09\xc6\x2c\xb4\x5a\x82\x6f\xc5\x55\xea\x27\xb0\xa1\xe1\xaa\xcd\xd7\x06\x98\xb4\x9b\x7f\x42\x56\x33\x75\xa7\xc9\x34\x09\xc8\x86\x6f\xc0\xa5\xf1\xe7\xa7\xa7\x85\xc7\xe8\xca\x3c\x07\xc9\xf6\x8f\x80\xd9\xcb\x71\x8e\x7d\xf2\x55\xad\x28\x40\xd5\x76\x60\xde\x79\x3c\x53\x73\xcc\xa4\x79\xda\x60\x56\x37\x4a\xe6\xed\x08\xec\xcf\x8a\x09\x59\x6b\xf0\xb8\x77\x5e\x19\x58\x2e\xae\x8e\x77\xd0\x3a\x1e\x71\xfa\xcd\x11\xdf\x5c\x16\xf1\x69\x80\xb7\xef\x8e\x91\xef\x80\x1b\x81\x1d\xbf\x4e\xe3\xd8\x17\x0c\x2c\xe0\xad\x2b\xb1\x3e\xd1\x21\x52\x2c\x1b\x43\x12\x6c\xf3\xff\x40\x81\xe9\xb5\xe7\xdc\x77\xfd\x4c\x23\x33\x32\x1e\x7a\x62\xec\xb7\x3a\xcd\x55\x81\x3d\x33\xeb\x5a\x3d\x6a\x86\x5d\x20\xd0\xf8\x55\xb0\x66\x10\xe0\x78\x99\x3d\x3f\x47\x0f\xcd\xd7\xd7\x2f\xbf\xbd\xbc\xbc\x11\xe5\xab\x35\x5d\x09\x09\xb3\xf3\xee\xf6\x91\xb7\xe3\xe4\xe2\xde\x6e\xc5\xb3\x49\x92\xde\xd1\x34\xa1\xe9\x0d\x9d\xf2\xfb\xc9\x6a\xca\xff\xf7\x7d\x7e\xaa\x3a\x6d\x54\x41\x6d\x0a\xc6\x37\x0e\xf1\xb3\x0b\xde\x81\x5c\xcf\xda\x3d\x2e\xc9\xba\xa5\xab\x63\xe1\x9c\xc6\xed\x0b\x37\x8c\xd9\x8a\x49\x03\xc1\xf3\x75\xa4\xf4\xd1\x20\x30\xec\x82\xbd\xfc\x50\x82\x85\xbf\xdb\xb5\x27\xdc\x16\x3b\x03\x07\x6b\xe2\x55\x76\x86\x45\xf2\xd0\x96\xdb\x20\x7b\x4b\xad\xf4\xe1\x20\x3c\xbb\x98\xfc\x0d\xbc\xd3\xc1\xe7\x21\xf9\x66\xd4\xbc\x07\x9a\xcb\x31\x73\x81\x85\x10\x32\x58\x34\x5e\xe4\xb3\xd2\x48\xa5\xb6\x75\xe5\x2f\x78\x39\xac\x58\x2d\x6d\x64\x76\x3c\x0a\x2a\x4a\x06\xd8\x90\x1f\xe3\x1c\x76\x71\x59\xcb\xa0\xc3\x5d\xa1\x67\xc1\x9b\x71\xae\xf4\x07\x0f\xcc\xb1\xe2\xb4\xd3\xf2\xe8\x06\xf9\x66\x0f\xc0\x15\xd8\xee\xe7\x42\x67\xe4\xf9\xe5\xc8\xc3\x1f\x8c\xd5\x8d\x32\xdd\x38\xf4\x1d\x38\x33\x64\x4f\x8d\xd8\x53\x06\xcf\x4e\x30\x04\xea\x42\xe1\x0f\x00\xac\xda\xbc\xcd\xff\xe8\xdf\x00\x00\x00\xff\xff\x46\xee\x13\x6b\x41\x0e\x00\x00")

func templatesKube_dnsYamlTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesKube_dnsYamlTemplate,
		"templates/kube_dns.yaml.template",
	)
}

func templatesKube_dnsYamlTemplate() (*asset, error) {
	bytes, err := templatesKube_dnsYamlTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kube_dns.yaml.template", size: 3649, mode: os.FileMode(420), modTime: time.Unix(1468525626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMasterOpensslCnfTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8e\x61\x4b\xc3\x30\x10\x86\xbf\xe7\x57\xf4\x07\x8c\xb0\x6e\x8a\x20\x08\xce\x39\x41\x18\x43\x2c\x7e\x2a\xa5\xa4\xe9\xd9\x9d\xcb\xae\x33\xb9\x0c\x65\xec\xbf\x7b\xa9\x43\x10\x27\x81\x90\x7b\x9f\x97\x3c\x57\x7a\x78\xaf\x94\x5c\x35\x7c\x30\x50\xc0\x9e\x42\x76\x93\xed\xa7\xb5\x64\xaa\xc5\xc0\x48\x5d\xc4\xb0\x86\xb6\x26\xb3\x05\x61\xa9\xfc\x17\xa8\xf2\x7c\x5e\xa9\xf2\xf4\x5b\x56\xa9\xc6\x04\xb4\x73\x51\xb0\x37\x48\x9c\x4c\xf3\xd9\xf5\xc3\x6c\x59\x2c\xd4\x06\x3e\x5f\x82\xe9\x92\x81\x7a\x7a\x86\x5d\x6c\xd1\xb0\xec\x33\xca\x5a\xec\x90\x8d\x2b\xb0\x23\xc3\xd1\xc3\x28\x93\xf2\x82\x2c\xee\xd6\xe0\xb7\x40\xac\x42\x6c\xde\xc0\xf2\xcc\xf1\xea\x7b\xc9\x5b\xe3\x78\xf0\x07\x55\xfe\x3c\x2b\x75\xbf\x2a\x74\x2e\x78\x13\x1b\xf0\x04\x2c\x38\x45\x93\x5f\x91\x6e\xe1\xd5\x44\xc7\x03\x9a\x9e\x45\x3a\xec\xed\x80\x2f\xfe\xc5\xda\xba\x18\x18\xbc\x76\xbd\x35\x6e\x28\x5f\x4a\xf9\x70\xd0\x8b\xe5\x9d\x4c\x69\xd1\xe3\x51\x3d\x3e\x0d\xf6\x7c\x72\xa5\xc7\x72\xf2\x14\x24\x67\x3e\x3e\xcd\x5f\x01\x00\x00\xff\xff\x28\xe0\x21\xc5\xa2\x01\x00\x00")

func templatesMasterOpensslCnfTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesMasterOpensslCnfTemplate,
		"templates/master-openssl.cnf.template",
	)
}

func templatesMasterOpensslCnfTemplate() (*asset, error) {
	bytes, err := templatesMasterOpensslCnfTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/master-openssl.cnf.template", size: 418, mode: os.FileMode(420), modTime: time.Unix(1469129780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMasterUserDataTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\x6f\x73\xda\x38\x13\x7f\x9f\x4f\xb1\x0f\xed\x33\xd3\xde\x60\xec\xa4\x69\x9b\x32\xe3\x17\x14\xdc\x96\x39\x9a\xf4\x80\xb4\x2f\x3a\x37\x8c\x22\x0b\xd0\xc5\xb6\x7c\x92\x0c\x65\x7a\xf9\xee\xb7\x92\x65\xc7\x04\x48\x72\xd7\x5e\x32\x03\xb1\xb4\xda\xbf\xbf\xfd\x69\x9d\x27\x34\x11\x45\xec\x51\x91\xcd\xf9\xe2\x68\x2d\xb9\x66\xb3\x39\x4f\x98\xea\x1e\x01\x78\x90\x13\xbd\xec\x82\x5f\x28\xe9\x27\x82\x92\xc4\xbf\xe2\x99\xbf\x60\x7a\x76\x7d\xa6\x66\x94\x49\xad\x3a\x6a\x89\x92\x00\x62\x9d\x31\xd9\x05\x29\x84\xb6\xcf\x39\x93\x29\x57\x8a\x8b\x4c\x75\x21\x78\xfd\xf2\xa5\x5d\x45\x3b\x9a\x65\xba\x0b\x7f\xd9\x47\x80\x27\xff\xb3\x2a\xaf\x88\x5a\x82\xc7\xdc\x62\x7a\x1d\x73\x09\x5e\x0e\x3e\xd3\xd4\xbf\x2e\xae\x98\xcc\x98\x66\xca\x57\x2a\x71\x22\x3c\x53\x9a\x64\x94\xcd\x78\x1c\x3e\x7d\x46\x0b\x99\xc0\xf1\xab\x37\x9d\x93\x97\xa7\x1d\xf7\xed\x27\x04\x8f\x68\x3f\x65\x9a\x78\x31\xd1\xc4\xaf\xce\x78\x3c\x7e\xee\xd4\x90\xb5\x02\xf5\x02\x68\x8e\x9f\x5d\xdf\xff\xfe\xbd\x33\x99\x8c\x26\x5a\x48\xb2\x60\x6f\x0b\x7a\xcd\xf4\xcd\x8d\xff\xf4\x7b\xc3\xda\x8d\x47\x72\xae\x98\x5c\x31\xd9\xc9\x59\xba\xcf\x45\x7f\x4b\xe2\x67\x58\xf2\xae\xd9\xe6\x61\x6b\x95\xd4\x0f\x58\xa4\xe4\xa0\x99\x72\xcb\xe9\xa6\x4b\xac\x37\x18\x89\xae\xf9\xd8\x7b\xe0\x97\x2d\xf9\x54\xc4\x10\xbc\x0a\x82\x07\x45\xd5\x46\x69\x96\x52\x9d\x00\xfa\x25\xb5\x35\x72\x9b\x89\xfb\x84\x0c\xb8\xa4\x48\x12\xcc\x44\x4a\x32\x8c\xf2\x5e\x69\x45\x97\x2c\x2e\x12\x2b\x54\x01\xbd\x75\xd7\xb9\xda\x6e\x6b\x17\xd4\xad\xe0\xd5\xe9\x69\xab\x09\xfe\x96\x41\x7f\xeb\x00\xd0\x61\xba\x64\x40\xe2\x58\x32\xa5\x40\x64\xa0\xf1\xd1\xf6\x14\x94\x16\x40\x0b\x48\x38\x3a\x8a\x5b\xa2\xe3\x4e\xfd\x7a\xf9\x36\x9a\xf5\x3e\x0d\x67\xbd\xc1\x60\x1c\x4d\x26\x61\xcb\xf3\xb0\x60\x0c\x01\xcf\x3c\x6c\x9c\xd8\x73\x1a\xc3\xe3\x93\xd7\x9d\x00\x7f\x8f\x5b\x47\xb5\xc5\xbe\x48\x53\x82\xea\x73\x22\xb1\x17\x62\xab\x1e\xc4\x1c\x32\x11\x33\x85\x2d\x64\x7d\xc0\x88\x63\xa0\x49\x81\x96\x65\xd3\x6a\x34\xed\x0f\x66\x93\x68\xfc\x39\x1a\x5b\xb3\x46\xce\x2b\x5d\x55\xe1\x52\xeb\x1c\x31\x55\x1b\xed\x9e\x06\x41\xd3\x72\xcf\xc5\x29\x49\xb6\x60\x26\xb2\x42\x31\x98\x0b\x69\x63\xe5\x14\xad\x37\x4d\x19\x2b\xc3\x7e\x54\x05\x19\x59\x7b\x4e\xd2\x73\xae\x79\x3c\xf7\xac\xb6\xd0\x00\xb9\xdc\xeb\x97\x5b\xc3\x4f\x63\xb3\x71\x73\xd3\x70\x20\x66\x73\x52\x24\x1a\x13\xee\x0a\x06\x0e\x1d\x90\x8b\x84\x53\xce\xd4\x56\x86\x07\x1f\x87\x93\xc9\xf0\xe2\x7c\xd6\xbf\x38\x9f\x8e\x2f\x46\xc6\x81\xfa\x68\x05\xac\xf0\x9c\xa4\x4c\xe5\x84\xb2\x11\x9f\x33\xba\xa1\x09\x6b\xd7\x4b\xd1\x37\x4c\xae\x6a\x8f\x78\xca\xb5\x75\x47\xb6\x27\xa6\x4c\x5c\x6f\xfa\x06\x0b\xdf\xf4\x80\x65\x9b\xb6\xf3\xbc\x47\xa9\x28\x32\xdd\x1e\x33\x25\x0a\x49\xd9\x6f\x85\xd0\xa4\xe5\x5c\x6a\x66\x91\x6b\x74\x00\x31\x42\xe4\x42\x99\x3c\x9a\x8a\xd5\xa0\x84\x67\xd8\xd1\xcf\x77\xa0\x32\x7e\x6f\x13\x58\x32\x7b\x2e\xc5\x8a\xc7\x4c\x86\x86\x0e\x3c\x4f\x27\xca\x33\xbc\xed\x19\x92\x0f\x1f\x24\x2f\x30\x69\xc0\xbf\x35\xae\xd5\x50\x7b\x9a\x4b\xbe\x42\x40\xcd\x78\xbe\x3a\x75\x3a\xdd\x92\xa1\xa0\x47\xa8\xae\xf9\xcc\x78\xc9\xb1\x4f\x90\x78\x0e\x1f\x73\xa4\x74\x0b\x09\x52\x66\xef\x1f\x1a\x6b\xa4\xf7\x60\xbf\x97\xf7\xe0\x4f\x68\xf6\x44\x2c\x16\x3c\x5b\x98\x92\x29\x8d\xe9\x97\x90\x32\x92\x29\x58\x33\xc0\xeb\x13\xb8\xae\xda\xaf\xe4\xa6\x18\xfe\x40\x1c\x60\xa1\x9b\xc5\x1c\x5d\xbc\x9f\x5e\x4c\xa6\x83\x68\x3c\x36\xf5\x44\x95\x5a\x94\xca\x42\x2d\x0b\xd6\xaa\x8d\xb9\xb3\x68\x42\x29\xa4\x3d\x48\xd8\x8a\x25\x6d\x08\x80\x2b\x6c\x84\xab\x62\x71\x47\xeb\x6c\x14\x7d\x8e\x2c\xc6\x57\x61\x70\xab\x66\xb2\x14\x45\x12\xa3\x57\x78\xcc\x75\x1d\x20\xb7\x93\x24\x11\x6b\x64\x0f\x0c\x45\x16\x19\x98\x4a\x63\xce\x17\xb8\x12\x0b\xbc\x45\xa4\x0d\x9f\x70\x4c\xca\x76\x4f\x8d\x46\x17\x5f\x66\x9f\xc6\xc3\xcf\xb6\x99\x8c\x12\xef\xf6\xec\x9d\x08\x3e\x88\xb5\xcd\xc6\x2e\x85\xb7\xa1\x26\x6a\x98\x23\xe1\x6d\x77\x40\xd3\xe0\xc7\xde\x64\x1a\xd9\x4c\xa5\xc4\xf8\xbe\x4b\x52\x67\xc1\x59\x23\xdc\x08\x09\xed\x30\xe1\xb9\xc3\x5b\x58\xef\x9e\xbc\x78\xfd\xe6\x91\x30\xba\x13\xc6\x4f\x80\xd4\x01\x36\x38\x78\xeb\xd9\xa0\x1c\x9f\x8d\xa2\x31\xe6\xe7\xbc\xf7\x1e\xbf\x2b\x7e\x70\x59\xda\x4e\x8f\xed\xc8\x92\x70\x29\x8f\xa5\x21\x5b\xc7\xb2\xfd\xe1\x60\x7c\x73\x03\x65\x29\xa9\xe9\x75\x73\x8d\x58\x29\x65\xab\x09\x07\x28\xa7\xd2\x97\x21\x55\x36\xf4\x19\xe6\xb4\xfa\xee\x76\xf5\xbf\xa4\x92\xea\xc7\xf3\x4c\x16\x1f\x41\x28\x2d\x78\x44\x25\x6b\xf0\xfd\x77\x05\x6c\x0e\x22\xb7\x57\x62\xff\x43\x34\xb8\x1c\x3d\x54\xae\xbd\x60\xb4\xd3\x3a\xbf\xf2\x1d\xb5\xb8\x6f\x13\x59\x7c\xd2\x71\xd9\xfe\xe1\x70\xbe\x5e\x66\x5c\xff\xee\x1e\x06\x4c\x51\xc9\x73\x13\x5c\x68\xe7\x09\x53\xbb\x15\x49\x10\x14\x0a\x07\xce\x6a\xae\x1f\x08\x5a\xa4\xa8\x85\x58\x41\xd3\x61\x0a\x5b\x6c\xc1\xf5\xb2\xb8\xea\x50\x91\x62\xdf\x48\x26\x94\xf5\xb4\x32\xe3\x2e\xcc\xca\xd2\x94\xa7\x4c\x14\x7a\x62\xe6\x38\xbc\x5f\xc3\xc0\xad\x5f\x62\x5c\x61\xe3\xdc\x74\x93\xb3\x30\x13\x9a\xcf\x37\x6e\x25\xca\x56\x5c\x8a\xcc\xd8\x0f\x6d\xab\x0f\x7a\xd3\xde\x6c\x30\x1c\x87\xfe\x8a\x94\x09\x6b\x9c\xdf\x91\x3e\xef\x7d\x8c\xc2\xff\x7f\xd8\xdd\x7e\x67\x50\xe6\x59\xdc\x98\xdb\xa3\x13\x6f\xa9\xf9\xc6\xa8\xf5\x35\xb4\x55\x31\xaf\x3a\x8d\x5d\xbc\xfd\xed\x1e\x49\xd6\x64\xa3\xb6\x17\x4d\x70\xc7\x41\xb5\x68\xc7\x8a\xf3\x8b\x77\xc3\x51\x14\xe2\xa8\x15\x54\x61\x7f\x1d\x9a\xe9\x3d\x49\xaa\xf4\x7c\x21\x58\xa6\xf8\xed\x26\x4c\x71\xf8\xe1\x1e\x4e\x5d\xb2\x83\xda\xf0\xca\x39\x2a\x73\x6b\x5e\xeb\x2c\x10\xba\xf6\x44\xcc\x15\x15\xd8\x45\x9b\x2e\x60\x67\x0e\xaa\x27\xec\x4b\xbb\x7d\x7b\xf7\xbb\x6b\x1a\xdf\xb3\x10\x29\x07\xb9\xb1\xbd\x77\xc7\xcc\x86\x56\x1d\x47\xc8\x70\x92\x34\x46\x8a\x9c\x61\x07\xdf\xab\xf4\xac\x0c\xb5\x9c\x8c\xf7\xba\x11\xd8\x7e\x08\xb6\x1c\xa8\xd6\x6a\xd3\xee\xfc\x23\xed\x15\xe8\xa8\x2a\x33\xe4\x81\xe1\xad\x2e\x6c\x75\x4f\xf5\x56\x63\xe6\xeb\x2c\xee\x96\xaf\x15\x5b\xe2\x98\x71\x0f\xdf\x91\x3d\xf7\x8e\xfc\xd0\xb1\x3d\x0d\x76\xa7\xc5\xb6\x9b\xcc\xcc\x10\xa8\x1e\xac\x7a\x98\x4b\x91\xe2\x4b\x5e\x2d\x39\x66\x7f\x16\x1c\x47\xb5\x70\x9f\xd3\x00\xbd\xb9\x21\x12\xe4\xb7\xb5\x90\xd7\x0e\x1e\x7b\xe3\xdb\x6d\x3f\xd7\x58\x22\x63\x6a\x29\x74\xbd\x78\x07\xe6\xf7\xfc\xab\xe0\xef\x00\x00\x00\xff\xff\x5d\x9e\x5d\xd6\x70\x10\x00\x00")

func templatesMasterUserDataTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesMasterUserDataTemplate,
		"templates/master-user-data.template",
	)
}

func templatesMasterUserDataTemplate() (*asset, error) {
	bytes, err := templatesMasterUserDataTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/master-user-data.template", size: 4208, mode: os.FileMode(493), modTime: time.Unix(1468525626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMinionOpensslCnfTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\xc1\x4a\x03\x31\x10\x86\xef\xf3\x14\x79\x80\x52\x10\x6f\x82\xe0\x52\x2a\x14\x44\x8a\x45\x3c\x84\xb0\x4c\x37\x43\x3a\x76\x3b\x5b\x33\x13\x51\x96\x7d\x77\xb3\x2a\x5e\xec\x25\x84\xff\xfb\x99\xef\xf7\x99\xde\x02\xd4\xa7\xa5\x0f\x23\x51\x1e\x44\xdd\xad\x7b\xbf\x6e\x6b\x06\x91\xd5\x58\x52\x61\x3d\x50\x6c\x05\x4f\x54\xd9\x5c\xfe\x0f\xc0\x5f\xce\x03\xf8\xdf\x6b\x2e\xc0\x1e\x95\xbb\x55\x55\x58\x46\x16\x9b\x4d\xab\xe6\xe6\xbe\x79\xd8\xad\xe1\x48\x9f\xcf\x8a\x69\x36\xc8\x20\x4f\x74\x2e\x91\xd1\xea\x9e\x85\x8b\x9c\xd8\xb0\xdf\x71\x12\xb4\x92\x69\xe1\x6a\x79\x2d\x1d\x9f\x0f\x94\x4f\x24\x06\x5a\xf6\xaf\xd4\x59\xd3\xdb\xe3\xcf\xc8\x3b\xec\xed\xdb\xaf\xe0\xff\xbe\x01\x36\xdb\xe5\x55\xa5\xe3\xb8\x7c\x19\xf2\x91\xf2\x66\x3b\x4d\xf0\x15\x00\x00\xff\xff\x22\xc5\x70\x42\x04\x01\x00\x00")

func templatesMinionOpensslCnfTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesMinionOpensslCnfTemplate,
		"templates/minion-openssl.cnf.template",
	)
}

func templatesMinionOpensslCnfTemplate() (*asset, error) {
	bytes, err := templatesMinionOpensslCnfTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/minion-openssl.cnf.template", size: 260, mode: os.FileMode(420), modTime: time.Unix(1468525626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMinionUserDataTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x5b\x8f\x1a\xb7\x17\x7f\xcf\xa7\xf0\x7f\x93\x87\x7f\xab\x9a\x21\x6d\x36\x49\x91\xfc\xc0\x2e\x93\x64\x55\xb2\xac\x18\xb2\x69\x15\x55\xc8\xcc\x1c\xc0\xc5\x33\x9e\xd8\x1e\x08\x4a\xf9\xee\x3d\xf6\xcc\x30\x5c\x76\xd9\x4a\x94\x95\x40\xf6\xb9\xff\xce\xcd\xfb\x3c\x96\xaa\x48\x68\xac\xb2\xa9\x98\x3d\x5b\x69\x61\x61\x3c\x15\x12\x4c\xe7\x19\x21\x94\xe4\xdc\xce\x3b\x24\x28\x8c\x0e\xa4\x8a\xb9\x0c\x26\x22\x0b\x66\x60\xc7\x8b\xb7\x66\x1c\x83\xb6\xa6\x65\xe6\xc8\x49\x88\x5a\x65\xa0\x3b\x44\x2b\x65\xfd\x39\x07\x9d\x0a\x63\x84\xca\x4c\x87\xb4\xdf\x5c\x5e\xfa\x5b\xb4\x63\x21\xb3\x1d\xf2\xb7\x3f\x12\xf2\xfc\x7f\x5e\xe5\x84\x9b\x39\xa1\x50\x5d\xa6\x8b\x44\x68\x42\x73\x12\x80\x8d\x83\x45\x31\x01\x9d\x81\x05\x13\x18\x23\x2b\x16\x91\x19\xcb\xb3\x18\xc6\x22\x61\x2f\xfe\x1f\x17\x5a\x92\x97\xaf\x7f\x6d\xfd\x7c\xf9\xaa\x55\xfd\x06\x92\xa3\x88\x0d\x52\xb0\x9c\x26\xdc\xf2\xa0\x96\xa1\x22\xf9\xa1\x52\xc3\x57\x86\x98\x5f\x48\x9c\xe3\x77\x27\x08\xbe\x7f\x6f\x45\x51\x3f\xb2\x4a\xf3\x19\x5c\x15\xf1\x02\xec\x66\x13\xbc\xf8\xbe\x63\x6d\x43\x53\x91\x61\x54\xad\x1c\xd2\x87\xfc\x0b\x1a\xf2\xd9\x36\xe8\x02\xd6\x4f\xd8\xa9\x59\xce\xb0\x15\xf3\x47\x6d\x94\xa4\x4a\x77\x3c\xc7\x1c\x13\xc7\xd1\x71\x5f\x0f\x0a\xfc\xb8\xc7\x9f\xaa\x84\xb4\x5f\xb7\xdb\x4f\xb2\x9a\xb5\xb1\x90\xc6\x56\x12\xf4\x4b\x5b\x6f\x44\x82\x3d\x41\xa5\xb9\x56\xdf\xd6\xbb\x35\x7a\x60\xa2\xaa\xe8\x33\x4a\xf3\xb7\x4f\x57\xe1\xb8\x3f\x78\x3f\x1a\x44\xa3\x5e\x38\x1c\xb2\x0b\x4a\xa5\x9a\x59\x65\x6c\x02\x5a\x33\xab\x0b\xb8\xa8\xcb\x98\xfc\xa5\x0a\x9d\x71\x49\x52\x30\x06\xc1\x26\x12\x96\x20\x7f\x22\x6d\x22\x0c\x49\x60\x52\xcc\x0e\xb4\x8e\xfb\xe1\x7d\xd8\x77\x3a\x97\xac\x7d\xb1\x4b\xec\xf6\xfb\x83\xcf\xe3\xbb\xe1\xcd\xbd\xa3\x72\x29\xd5\x0a\xa3\x15\x4b\xec\xca\x19\x24\x7b\x66\x3d\xff\xc7\x6e\x34\x0a\xd1\xbb\xb9\xb5\xb9\x29\x93\x1e\xf6\xaf\x7a\xb7\xd1\x2d\x4f\x61\xb3\xb9\x38\x01\xd2\x2e\xce\x67\xa0\xd4\x0f\x47\xe3\x6e\xaf\x37\x0c\xa3\xc8\xbb\x9c\x24\x1a\x51\x60\x2f\x9c\xd7\xd8\x84\x63\x91\x2f\x5f\x5d\x1c\xf0\x7f\x40\x54\x6f\xbb\x1f\x43\x27\x30\x47\x48\x33\x74\x96\xaa\x25\x02\x2b\x12\x38\x2d\xda\xbd\xbb\x19\x47\xe1\xf0\x3e\xf4\x29\xe1\xb9\xa0\x06\x34\x4a\x1a\x76\x02\x82\x3d\x05\xc3\xf7\xde\xd1\x72\xf6\x61\x25\x2d\xd1\xa6\x66\xae\x79\x28\x75\x98\x94\xc5\xc3\x82\x25\xc7\xb9\x27\x26\x35\x4e\x41\x43\x43\xc6\x0c\xbb\x2f\xe5\xe6\x6b\x01\x9a\x27\x40\x63\x91\x68\xf6\xb2\xdd\xf2\x7f\xc1\x5b\xe2\xd4\x17\x58\xb8\x9a\x26\x99\x61\xe8\xd1\x75\x79\x44\xaf\x36\x1b\x47\xf5\x7a\x0a\x8d\x92\x13\xdd\xf6\x69\xdd\x95\x51\x29\x17\x19\xab\x8e\x2d\x3f\x7c\x91\x6c\xa5\xa1\x6e\xec\x52\x37\xa3\xd9\xe9\xf1\x53\xb1\x57\x48\xba\x41\xf1\x94\x54\x3d\x4c\x4e\x95\x4c\xdd\x77\xe7\xb5\xd5\xdd\x70\xf0\xfb\x1f\x3b\x79\x28\x83\xf6\x10\x36\x48\x5d\xdf\xf4\x86\x1e\x2a\x6f\x93\xe2\x34\x01\x26\x72\xcb\x27\xb8\x9e\xfe\x75\xa2\xf6\x62\x79\x9c\xed\x9c\x88\xb0\x02\xef\xb1\xfa\x90\xad\x43\x96\x2f\xab\xcb\x85\xc8\x92\x0e\xb9\x6e\x94\xa3\x60\x19\x96\x5f\xad\xe5\x87\xd6\x77\xcd\x95\x67\xc4\x0c\x8b\xa9\x88\x5d\xda\x78\x61\xe7\x0a\xd7\xf2\xfa\x38\x15\x47\x13\xba\x1a\x97\xbe\x19\x3a\xe4\x91\x66\xd8\xe1\x75\x3d\xd7\x21\x8d\xc6\xda\x4f\x17\xe0\x37\xbb\xef\x67\x79\x77\xe0\x67\xe5\xfc\xb1\x8a\xf2\x53\x98\x9a\xd8\x0c\xf3\x7d\xbb\x78\x4f\xad\xa2\xc7\x2e\x14\x5a\x23\xc6\xb4\x36\x7b\x92\xd9\x99\xd9\x73\x76\x4f\xff\xb3\x03\x7f\x0e\x22\x10\xde\x4c\x03\xf8\xc3\x30\x1f\x2d\xf5\x3d\x71\x6c\x9b\x53\x62\xdb\x1d\x1d\x2b\x0d\xca\x7b\x5a\x64\xa2\xc6\xb7\x76\x37\x51\xb8\x9e\x75\xcb\x65\x4f\xc4\xb0\x4d\x45\x9a\x72\x57\x48\x7e\xf3\xed\xe6\x67\xb7\x00\x09\xf9\xf2\x09\x15\xfe\xb9\x3d\xf6\xc0\xc4\x1a\x5b\x05\x8d\xb3\x9e\xd7\x4b\xba\x79\x2e\x5d\x80\x78\xe5\xaa\xd2\xe2\x74\xc1\xdb\x30\x9b\xe1\x6f\x23\xa7\xe2\x22\x45\xd5\x9e\x6d\x3b\x4d\xd1\x33\xd3\xaa\xdc\x43\x87\xb6\xdc\xdd\x29\x26\x9f\x61\xb4\x2b\xa5\x17\x2d\x74\x10\x1f\x86\xdb\x30\xdc\x4f\x83\xfd\x10\xbe\x16\x02\x97\x02\x7b\x98\xfc\x25\x2a\xa3\x6e\x22\x18\xad\x73\x60\x99\xc2\xac\xac\xb7\x77\xe1\x37\x88\x23\x87\xc3\x9d\x06\x46\xfd\xa3\xd4\xbf\x1d\xb5\x7b\x1a\xe0\xd2\x99\x68\xe2\x46\xe9\x31\x3f\xdb\xf2\x96\xe6\x49\xc2\x21\x45\x1c\xe8\x07\x32\x4d\x30\x40\x42\x0d\x73\xab\x47\xf2\x35\xce\x95\x09\x6e\xa0\x19\x30\xa7\x0a\x4f\xf5\xc0\x61\x53\x2e\x0d\xf8\x0b\x3f\xf5\xb7\x67\x7c\x12\x50\xbf\xec\xd9\x8a\xeb\x8c\x6c\xad\x7f\x54\x45\x66\xdf\x49\x3e\x33\xcc\x48\xbe\x6c\x40\xee\x8b\x54\xd8\xdb\xc1\xbb\x9b\x7e\x88\xfb\xe2\xd5\xdb\xcb\x37\xaf\x0f\x68\x38\x1d\xaf\x1f\x26\x5d\x0f\x86\x21\x13\x38\x53\x30\xdd\x0d\x30\x23\x91\x82\x2a\xac\x8f\x35\x82\x98\xb5\x77\x0a\x01\x1f\x0d\x58\xd5\x6c\xbd\xd3\x9a\x5f\x6e\xdc\xf3\x4f\xca\x06\xed\xcf\x1c\x2b\x2a\xb9\x5a\xb3\xb4\x90\x56\x50\xd7\x27\x55\x3e\xf7\x4a\x14\xcf\x14\x1f\xfe\xb4\x7a\xf8\xff\xd7\x95\xea\xca\x07\xd5\xfb\xf1\x67\xc8\x54\xab\x14\x5f\xb1\x27\xab\xed\xa9\x02\x52\x19\x98\xb9\xb2\x8f\x55\xc4\xe3\xff\xd2\xfc\x13\x00\x00\xff\xff\x00\x29\x96\x3b\x17\x0d\x00\x00")

func templatesMinionUserDataTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesMinionUserDataTemplate,
		"templates/minion-user-data.template",
	)
}

func templatesMinionUserDataTemplate() (*asset, error) {
	bytes, err := templatesMinionUserDataTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/minion-user-data.template", size: 3351, mode: os.FileMode(493), modTime: time.Unix(1468525626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8s_certsGenerate_admin_keypairSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\x41\x0e\x82\x40\x0c\x45\xf7\x9c\xa2\xe2\xba\x40\x8c\x26\xb2\x70\x41\x66\xef\x1d\x3a\x43\xa3\x23\x50\x70\x0a\x51\x6e\xaf\x60\x02\xc4\x6e\x5f\xff\x7b\xfb\x5d\x6a\xbd\xa4\x96\xf4\x1e\x45\x6d\xc7\xa2\x5a\xc3\x8d\x25\x28\x01\xb6\x43\x0f\x54\x36\x5e\xb0\xe2\x31\xe9\xb8\x81\x43\x76\x3c\x2f\x6f\x81\x9f\x80\xc2\x2f\x98\xf0\xdf\xe3\xba\x4d\x9c\x06\x40\x1d\xec\x03\xe2\xd4\x5c\x2f\xd5\x60\x19\x67\x12\x2f\xa6\xf7\x29\xcb\x01\x67\x9f\x97\xed\xcc\x14\xe0\xe8\x27\x34\xc5\x54\x71\xb4\x26\x4c\xe1\x02\x53\xcf\xca\xc1\x53\xbd\x4d\xce\xb8\xa4\x51\x21\xff\x5e\xf4\x09\x00\x00\xff\xff\x47\x01\xe0\xf2\xe5\x00\x00\x00")

func k8s_certsGenerate_admin_keypairShBytes() ([]byte, error) {
	return bindataRead(
		_k8s_certsGenerate_admin_keypairSh,
		"k8s_certs/generate_admin_keypair.sh",
	)
}

func k8s_certsGenerate_admin_keypairSh() (*asset, error) {
	bytes, err := k8s_certsGenerate_admin_keypairShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s_certs/generate_admin_keypair.sh", size: 229, mode: os.FileMode(493), modTime: time.Unix(1468525626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8s_certsGenerate_api_keypairSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8e\xb1\x52\x85\x40\x0c\x45\xfb\xf7\x15\xf1\x59\x07\x18\x11\x47\x0b\x0b\x66\x7b\x7f\xc1\xc9\xae\x01\x57\x30\x8b\x1b\x40\xf8\x7b\x01\x1d\x54\x46\xdb\xdc\x9b\x7b\xce\xe5\x45\x6a\xbd\xa4\x96\xf4\xf9\x74\x0a\x1d\x8b\x6a\x0b\x35\x4b\x54\x02\x0c\x43\x0f\xd4\x79\xe5\x38\x72\xc4\x86\xe7\xa4\xe3\x57\xb8\xca\xae\x6f\xf7\x6a\xe4\x37\x40\xe1\x77\x58\xe3\x3f\xca\xbf\x37\x12\xa7\x11\x50\x07\xfb\x02\xe7\xd4\x3c\xdc\x37\x83\x65\xdc\xd3\x33\xa0\x0b\x52\xf9\xfa\xc7\xce\x17\x27\x71\x52\xed\xcc\xa9\xc8\xee\x00\x37\xb2\x97\xe3\xb8\x29\xc1\xd1\x27\xda\x94\xab\x93\xa3\x6f\x19\x53\xba\xc8\xd4\xf3\xf2\xe0\xa9\x3d\xca\x6d\x95\x27\x9a\x15\xf2\x9b\x02\x90\xa7\x7e\xe1\xf9\x20\x0a\x63\xfe\xb8\xe1\x96\x53\xe5\x5b\xfe\xc7\xef\x23\x00\x00\xff\xff\xa3\xc1\xb7\xae\x4c\x01\x00\x00")

func k8s_certsGenerate_api_keypairShBytes() ([]byte, error) {
	return bindataRead(
		_k8s_certsGenerate_api_keypairSh,
		"k8s_certs/generate_api_keypair.sh",
	)
}

func k8s_certsGenerate_api_keypairSh() (*asset, error) {
	bytes, err := k8s_certsGenerate_api_keypairShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s_certs/generate_api_keypair.sh", size: 332, mode: os.FileMode(493), modTime: time.Unix(1468525626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8s_certsGenerate_caSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\xca\x2f\x48\xcd\x2b\x2e\xce\x51\x48\x4f\xcd\x2b\x2a\x4e\x54\xd0\xcd\x2f\x2d\x51\x48\x4e\xd4\xcd\x4e\xad\xd4\x2b\x48\xcd\x55\x30\x32\x30\xb1\x80\xab\x29\x4a\x2d\x54\xd0\xad\x30\x35\xb0\x54\xd0\xcd\x4b\x2d\x07\x12\xf9\x29\xa9\xc5\x0a\x20\xb5\xc8\x5a\x74\x53\x12\x2b\x8b\x15\x0c\x0d\x80\x00\x66\x1c\x44\xbc\xb8\x34\x29\x4b\x41\x49\xdf\xd9\xcf\x36\xbb\x34\x29\x55\x37\x39\x51\x89\x0b\x10\x00\x00\xff\xff\xd2\x43\x2c\x84\x8b\x00\x00\x00")

func k8s_certsGenerate_caShBytes() ([]byte, error) {
	return bindataRead(
		_k8s_certsGenerate_caSh,
		"k8s_certs/generate_ca.sh",
	)
}

func k8s_certsGenerate_caSh() (*asset, error) {
	bytes, err := k8s_certsGenerate_caShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s_certs/generate_ca.sh", size: 139, mode: os.FileMode(493), modTime: time.Unix(1468525626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8s_certsGenerate_minion_keypairSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\x4d\x92\x82\x30\x10\x85\xf7\x73\x8a\x1e\x66\x1d\xa0\x66\xc6\x2a\x59\xb8\xa0\xb2\xf7\x0a\x56\x88\x0d\x46\xa1\x83\x69\x50\xb8\xbd\x01\x14\xc5\xb2\x97\xfd\x7e\xbe\xf7\xf3\x1d\x65\x86\xa2\x4c\xf1\xe1\xcb\xd6\x48\xcc\x25\x14\x48\x8e\x15\x08\xdb\x36\x50\x19\x32\x96\xc4\x09\xfb\xb0\xc6\x0a\x7e\xe3\xff\xf5\xec\x73\x78\x06\x41\x78\x85\x41\x7e\x77\xbe\xa4\x43\xcd\x0e\x04\xb7\xd9\x11\x82\x48\x6e\x37\xd3\x37\x00\xa1\x2d\xe5\xa6\x78\x24\xef\xb5\xa1\xa6\x7c\x46\x74\xab\x38\x01\x31\x82\x0c\x2d\xea\x64\x0a\x5a\x4d\x24\x99\x0e\x7c\xad\x9e\x6c\x99\x6a\x87\xaa\x41\x46\x67\x54\xb9\xd8\x32\xea\x7b\xd5\x33\x24\xfe\x40\x60\xd7\x78\x94\x57\x18\x2e\x7f\xbb\x91\xe4\x5f\xb9\x29\xf1\xd3\xae\x5b\x00\x00\x00\xff\xff\x41\x9d\xd6\x24\x2f\x01\x00\x00")

func k8s_certsGenerate_minion_keypairShBytes() ([]byte, error) {
	return bindataRead(
		_k8s_certsGenerate_minion_keypairSh,
		"k8s_certs/generate_minion_keypair.sh",
	)
}

func k8s_certsGenerate_minion_keypairSh() (*asset, error) {
	bytes, err := k8s_certsGenerate_minion_keypairShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s_certs/generate_minion_keypair.sh", size: 303, mode: os.FileMode(493), modTime: time.Unix(1468525626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/assume-role-policy-document.json": templatesAssumeRolePolicyDocumentJson,
	"templates/dot-kube-config.template": templatesDotKubeConfigTemplate,
	"templates/kube-master-iam-policy.json": templatesKubeMasterIamPolicyJson,
	"templates/kube-minion-iam-policy.json": templatesKubeMinionIamPolicyJson,
	"templates/kube_dns.yaml.template": templatesKube_dnsYamlTemplate,
	"templates/master-openssl.cnf.template": templatesMasterOpensslCnfTemplate,
	"templates/master-user-data.template": templatesMasterUserDataTemplate,
	"templates/minion-openssl.cnf.template": templatesMinionOpensslCnfTemplate,
	"templates/minion-user-data.template": templatesMinionUserDataTemplate,
	"k8s_certs/generate_admin_keypair.sh": k8s_certsGenerate_admin_keypairSh,
	"k8s_certs/generate_api_keypair.sh": k8s_certsGenerate_api_keypairSh,
	"k8s_certs/generate_ca.sh": k8s_certsGenerate_caSh,
	"k8s_certs/generate_minion_keypair.sh": k8s_certsGenerate_minion_keypairSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"k8s_certs": &bintree{nil, map[string]*bintree{
		"generate_admin_keypair.sh": &bintree{k8s_certsGenerate_admin_keypairSh, map[string]*bintree{}},
		"generate_api_keypair.sh": &bintree{k8s_certsGenerate_api_keypairSh, map[string]*bintree{}},
		"generate_ca.sh": &bintree{k8s_certsGenerate_caSh, map[string]*bintree{}},
		"generate_minion_keypair.sh": &bintree{k8s_certsGenerate_minion_keypairSh, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"assume-role-policy-document.json": &bintree{templatesAssumeRolePolicyDocumentJson, map[string]*bintree{}},
		"dot-kube-config.template": &bintree{templatesDotKubeConfigTemplate, map[string]*bintree{}},
		"kube-master-iam-policy.json": &bintree{templatesKubeMasterIamPolicyJson, map[string]*bintree{}},
		"kube-minion-iam-policy.json": &bintree{templatesKubeMinionIamPolicyJson, map[string]*bintree{}},
		"kube_dns.yaml.template": &bintree{templatesKube_dnsYamlTemplate, map[string]*bintree{}},
		"master-openssl.cnf.template": &bintree{templatesMasterOpensslCnfTemplate, map[string]*bintree{}},
		"master-user-data.template": &bintree{templatesMasterUserDataTemplate, map[string]*bintree{}},
		"minion-openssl.cnf.template": &bintree{templatesMinionOpensslCnfTemplate, map[string]*bintree{}},
		"minion-user-data.template": &bintree{templatesMinionUserDataTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

