// Code generated by go-bindata.
// sources:
// templates/assume-role-policy-document.json
// templates/dot-kube-config.template
// templates/kube-master-iam-policy.json
// templates/kube-minion-iam-policy.json
// templates/kube_dns.yaml.template
// templates/master-openssl.cnf.template
// templates/master-user-data.template
// templates/minion-openssl.cnf.template
// templates/minion-user-data.template
// k8s_certs/generate_admin_keypair.sh
// k8s_certs/generate_api_keypair.sh
// k8s_certs/generate_ca.sh
// k8s_certs/generate_minion_keypair.sh
// config/config.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAssumeRolePolicyDocumentJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x8e\xbd\xaa\xc3\x30\x0c\x85\xf7\x3c\x85\xd1\x7c\x13\x12\x2f\x17\xb2\x79\xe8\x5e\x5a\xe8\x52\x3a\x18\xa1\x80\xc1\x3f\xc5\x72\x1b\x68\xf0\xbb\xd7\x76\xd3\x2e\x67\x38\xdf\xa7\x83\xb6\x4e\x08\xb8\x50\x64\x13\x3c\xcc\x02\xe4\x38\xc9\x7e\x1a\xfb\xe9\x1f\xfe\x2a\x3a\x27\x9d\xc8\x91\x4f\x05\x5e\x4b\x21\xc4\xd6\xb2\xa0\xc3\xb2\x10\xd6\x1e\x94\xb5\x61\x6d\x7e\x03\xc7\x68\x3c\x9a\xbb\xb6\x85\x7d\xed\x3a\x45\xf1\x69\x90\xea\x01\xa1\x1c\xb4\xd3\xaf\xe0\xf5\xca\x03\x06\x07\xbb\x96\x7f\x23\x0a\xd3\xfe\x12\x27\x9e\x15\xf3\xc3\xd1\x29\x58\xfa\x98\xb9\xe4\xad\xcb\xdd\x3b\x00\x00\xff\xff\x83\x74\x15\x01\xbf\x00\x00\x00")

func templatesAssumeRolePolicyDocumentJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesAssumeRolePolicyDocumentJson,
		"templates/assume-role-policy-document.json",
	)
}

func templatesAssumeRolePolicyDocumentJson() (*asset, error) {
	bytes, err := templatesAssumeRolePolicyDocumentJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/assume-role-policy-document.json", size: 191, mode: os.FileMode(420), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDotKubeConfigTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\x41\x6e\x83\x30\x10\xbc\xfb\x15\xfe\x00\x95\x7a\xf5\xad\xe2\xd8\x56\xaa\x2a\xb5\xd7\xca\x75\x96\xb0\x22\xb1\xd1\x7a\x4d\x82\x10\x7f\x8f\x6d\x8c\x82\x10\x9c\x96\x9d\xd9\x99\xf1\xe8\x1e\x7f\x81\x3c\x3a\xab\xe4\xf0\x2a\xcc\x25\x78\x8e\xff\x4a\x54\xb2\xcc\x4a\xc8\xf8\x19\x20\xc6\x06\x8d\x66\xa8\x74\xe0\xd6\x11\xf2\xa8\xe4\x34\xbd\xd4\x11\x79\x5b\x37\x5f\x9a\xdb\x79\xce\x17\x1e\x68\x88\xd7\x89\xf2\xa9\x93\xd0\xcf\xf7\x47\x86\xac\xbe\x82\x92\xfa\xe6\xff\xba\xf0\x0f\x64\x81\xc1\x0b\xe3\x2c\xc3\x9d\x17\xe3\x65\x2e\xc6\x25\xc5\xfe\x20\x61\xc1\x1f\x02\xc7\x06\x81\x08\x2c\x57\xab\xf8\x1e\xef\xd0\x9e\x94\xac\x9d\x6d\xf0\x2c\x7a\x82\x06\x22\xdd\x80\x8f\x0f\x98\x45\x32\xca\xd1\x0e\xa5\x4b\x90\x12\x17\xb3\xcb\xb3\xae\xa5\xa4\xbc\x4e\x55\x6d\x1a\x2a\xdc\x0e\xc6\x0d\xe7\x1d\xd6\x12\x1f\x01\x00\x00\xff\xff\xe8\xf5\x64\x7d\x9b\x01\x00\x00")

func templatesDotKubeConfigTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesDotKubeConfigTemplate,
		"templates/dot-kube-config.template",
	)
}

func templatesDotKubeConfigTemplate() (*asset, error) {
	bytes, err := templatesDotKubeConfigTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot-kube-config.template", size: 411, mode: os.FileMode(420), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesKubeMasterIamPolicyJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x91\x31\x6b\xc3\x30\x14\x84\xf7\xfc\x0a\xf1\xc6\x90\xb4\xb1\x33\x14\xb4\xb9\x49\x87\x0e\xed\x90\x40\x97\xd0\x41\x51\xce\x45\x54\x91\x40\x7a\x26\x14\xe3\xff\xde\x67\xd5\x74\xea\x54\xf0\x22\xa4\xef\x4e\x77\xe2\xa9\x5f\x28\x45\x6f\x48\xd9\xc5\x40\x5a\x51\xbd\xa9\xea\x75\xb5\x59\x57\x0f\xb4\x1a\xa5\x23\x1b\xc6\x15\x81\x45\x3c\x09\x50\xaa\x2f\xab\x48\x4f\x6d\x0b\x3b\x72\x6a\xbc\x8f\xb7\xe2\x2f\x42\x63\xf9\x27\xed\x44\xb0\xb5\xde\x23\xdb\xe4\xce\x58\xd2\xfb\xaf\xe5\x80\x1c\xbb\x64\x51\x4c\x22\x14\x3e\xac\xfe\x57\xf0\x12\x2f\xae\xfd\x7a\x0e\x99\x4d\xb0\x68\x98\xa5\xad\x63\xcc\x55\xb7\x4b\x90\x99\x1c\xe2\x8c\x15\x7b\x78\xcc\x59\xe1\x4d\x66\x67\x7d\x34\x97\xb3\xf1\x32\x34\x17\x3e\xf4\x0c\xdf\x43\x79\x2b\xb1\x7f\xa6\x4e\x4c\xa8\x49\x41\x9b\x5b\xd6\xe2\xd5\xba\xef\xef\x8e\xdb\xc7\xce\x7e\x82\x87\xe1\x5e\x4e\x3b\xdf\x65\x46\x7a\x35\x57\x08\x58\xd2\x74\x6f\x7a\xd1\x62\xdc\x0d\x8b\xef\x00\x00\x00\xff\xff\xf1\x3e\x54\x00\xc5\x02\x00\x00")

func templatesKubeMasterIamPolicyJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesKubeMasterIamPolicyJson,
		"templates/kube-master-iam-policy.json",
	)
}

func templatesKubeMasterIamPolicyJson() (*asset, error) {
	bytes, err := templatesKubeMasterIamPolicyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kube-master-iam-policy.json", size: 709, mode: os.FileMode(420), modTime: time.Unix(1472584768, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesKubeMinionIamPolicyJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x52\x31\x4f\xf3\x30\x10\xdd\xf3\x2b\xac\x1b\xab\xf6\x6b\x93\x0e\x9f\xe4\x2d\x94\x4e\x48\x0c\x04\x75\x41\x0c\xae\xb9\x96\x88\xc4\x16\xf6\x59\x1d\x2c\xff\x77\x6c\xcb\xa4\x80\x60\xa0\x1b\x8b\x4f\x7e\xef\xdd\xbb\xf3\x93\x7d\xc5\x18\xec\xd0\xd8\x5e\x2b\xe0\x0c\x9a\x55\xdd\x2c\xea\xd5\xa2\xfe\x0f\xf3\x44\x75\x24\x08\x47\x54\x14\xc9\x87\x08\x30\xe6\xf3\x19\xa9\xed\xe1\x80\x32\xe1\xd0\x0e\x83\x3e\x65\x7d\x26\x5a\x49\xc5\xcd\xae\xf9\xec\x8c\xdf\xa1\xd5\xce\x48\x9c\xac\x32\x2a\x8c\xe2\xe2\x64\x79\xd4\x72\xee\xfd\xbf\x6e\x7d\xe5\xe4\x0b\x52\x08\xcb\x78\xdb\x0c\xce\x12\x9a\x5b\x31\x62\x08\x33\x28\x6d\x8f\xb9\x86\xf9\xaf\x17\x42\xd9\xf0\x6b\xb4\xd2\xf4\x7b\xfc\x7e\x33\x28\x43\x2e\x34\x6f\x89\x84\x7c\xde\xe9\xc1\x8d\xf8\x93\xff\x04\x6f\xb4\x7a\xea\x4b\xb7\x3f\x27\xd2\x91\xe9\xd5\x71\xfb\xea\xc4\x60\x81\x7d\xa2\xd2\x88\x77\xb3\x7b\x71\x5c\xde\xb8\x3d\x1a\x85\x84\xb6\x04\x95\xf4\xf0\x35\x37\x98\x0c\x42\xf5\xb1\x5e\x1c\xe0\x5f\x7a\x63\x95\xbe\x4b\xa8\xde\x02\x00\x00\xff\xff\xad\xf6\xb2\x2d\xe9\x02\x00\x00")

func templatesKubeMinionIamPolicyJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesKubeMinionIamPolicyJson,
		"templates/kube-minion-iam-policy.json",
	)
}

func templatesKubeMinionIamPolicyJson() (*asset, error) {
	bytes, err := templatesKubeMinionIamPolicyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kube-minion-iam-policy.json", size: 745, mode: os.FileMode(420), modTime: time.Unix(1472330547, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesKube_dnsYamlTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x49\x6f\xeb\x36\x10\xbe\xfb\x57\x10\xee\xb5\xd4\xe2\x24\x2f\xae\x00\xf7\xf2\x0c\xb4\x45\x9b\xc2\x78\xc9\xeb\xb5\xa0\xa9\xb1\x4d\x98\x12\x55\x92\x32\xea\x06\xf9\xef\x1d\x6a\x0b\xe9\x38\x5e\x5e\x73\x28\x73\x08\x34\x1b\x67\xf9\x66\x38\x66\x95\xf8\x03\xb4\x11\xaa\xcc\xc8\x2e\x1d\x6d\x45\x99\x67\xe4\x11\xf4\x4e\x70\x18\x15\x60\x59\xce\x2c\xcb\x46\x84\x94\xac\x80\x8c\x6c\xeb\x25\xd0\xbc\x34\x1d\xc1\x54\x8c\xf7\x54\xb3\x37\x16\x0a\x64\x48\xb6\x04\x69\x9c\x0e\x21\xdb\xa9\xa1\xac\xaa\x02\x45\xd2\x7c\xe8\x12\x2c\x98\x48\xa8\x98\xcb\x1a\x35\x35\x35\xed\xad\x19\x19\x5b\x5d\xc3\xf8\x88\x64\xeb\xc3\xf8\x57\x24\xce\x7f\x7f\x1c\x8f\x4c\x05\xdc\xdd\x63\x40\x02\xb7\x4a\xbf\x7f\x67\x77\xc7\x2f\x8b\x8c\xa4\x49\xe4\xfe\xd2\x04\xc9\x95\xd2\xb6\xf1\x94\x76\xf1\xf5\x1e\x3a\x46\x46\xee\x6e\xda\x0f\xad\xac\xe2\x4a\x66\xe4\xeb\x7c\x11\x0a\x53\xcb\xab\x53\x0a\x4f\x9f\x17\xa3\x11\xa5\x74\x34\x3a\x9a\xe8\x2f\x50\x49\xc1\x99\x45\xea\x67\x55\x5a\xad\xa4\x04\x7d\x22\xed\x74\x97\xa6\xff\x2d\xf5\xbb\x57\x1f\xd2\x2b\x6a\xd1\x67\x5a\xb7\x0e\x1b\x4c\xe3\x45\x79\x7f\x73\x21\xfa\x59\x49\x66\xa1\x55\xf1\x23\x75\xc7\xf7\xff\x7d\x93\x47\xe3\xb8\x0e\x57\x7d\x3c\xee\x70\xcc\x3c\x13\x25\x1a\xec\x29\x7d\x81\xc1\xf2\x7c\x30\x2e\x0a\xb6\x46\xda\x9a\x6b\x67\x7c\xad\xd4\x5a\xc2\x9f\xaf\xba\xb1\x13\xa6\xac\xc8\x3f\xdd\x66\x93\x68\x12\xbd\x7a\xa5\xc1\xa8\x5a\x73\xf0\xe2\xc2\x48\x45\x21\x6c\x40\x41\x47\xaa\xda\xc1\x33\x29\x02\x6a\x01\x85\xd2\x7b\xc4\x56\x92\x3c\x08\x8f\xa3\xe1\xaf\x1a\xcc\xb5\x36\x3c\x13\x5c\x15\x05\x43\x14\x0e\x04\x4a\xe2\xda\xe8\x58\x2a\xce\x64\xbc\x14\x65\x1c\xc4\x4f\x09\x75\xa5\xa2\xb9\xd0\xbe\xc6\x8e\xe9\x46\x2e\x76\x4c\x5f\x58\x0a\xcc\x7e\x49\xb9\x14\x50\x5a\x5a\x6b\x69\x3c\xee\xc6\xda\x2a\x8b\xe3\x74\x72\xdf\x36\x63\x36\xb9\xb9\xff\xe1\xfb\x37\xd4\xdb\x24\x49\x7d\x9b\x2c\xc7\xba\x5b\x61\xe0\x63\xcd\x8a\x52\x58\xc1\x24\xed\x11\x63\xd5\x16\x4a\x4f\xc0\x6c\xf7\xae\xf9\x82\x74\xec\x94\xac\x0b\x78\x50\x75\xe9\x97\xc0\x47\x0e\x35\xd8\x1a\x88\x19\xaf\x12\x85\x13\x5f\x30\xbb\xc9\x8e\x27\x8e\x7a\xfd\x3e\xc1\x5b\x2f\x06\x5f\xaf\x90\xa5\x51\x7a\xfb\xd1\xc8\x9b\x7c\x34\xf2\xa4\xd8\x41\x09\xc6\x2c\xb4\x5a\x82\x6f\xc5\x55\xea\x27\xb0\xa1\xe1\xaa\xcd\xd7\x06\x98\xb4\x9b\x7f\x42\x56\x33\x75\xa7\xc9\x34\x09\xc8\x86\x6f\xc0\xa5\xf1\xe7\xa7\xa7\x85\xc7\xe8\xca\x3c\x07\xc9\xf6\x8f\x80\xd9\xcb\x71\x8e\x7d\xf2\x55\xad\x28\x40\xd5\x76\x60\xde\x79\x3c\x53\x73\xcc\xa4\x79\xda\x60\x56\x37\x4a\xe6\xed\x08\xec\xcf\x8a\x09\x59\x6b\xf0\xb8\x77\x5e\x19\x58\x2e\xae\x8e\x77\xd0\x3a\x1e\x71\xfa\xcd\x11\xdf\x5c\x16\xf1\x69\x80\xb7\xef\x8e\x91\xef\x80\x1b\x81\x1d\xbf\x4e\xe3\xd8\x17\x0c\x2c\xe0\xad\x2b\xb1\x3e\xd1\x21\x52\x2c\x1b\x43\x12\x6c\xf3\xff\x40\x81\xe9\xb5\xe7\xdc\x77\xfd\x4c\x23\x33\x32\x1e\x7a\x62\xec\xb7\x3a\xcd\x55\x81\x3d\x33\xeb\x5a\x3d\x6a\x86\x5d\x20\xd0\xf8\x55\xb0\x66\x10\xe0\x78\x99\x3d\x3f\x47\x0f\xcd\xd7\xd7\x2f\xbf\xbd\xbc\xbc\x11\xe5\xab\x35\x5d\x09\x09\xb3\xf3\xee\xf6\x91\xb7\xe3\xe4\xe2\xde\x6e\xc5\xb3\x49\x92\xde\xd1\x34\xa1\xe9\x0d\x9d\xf2\xfb\xc9\x6a\xca\xff\xf7\x7d\x7e\xaa\x3a\x6d\x54\x41\x6d\x0a\xc6\x37\x0e\xf1\xb3\x0b\xde\x81\x5c\xcf\xda\x3d\x2e\xc9\xba\xa5\xab\x63\xe1\x9c\xc6\xed\x0b\x37\x8c\xd9\x8a\x49\x03\xc1\xf3\x75\xa4\xf4\xd1\x20\x30\xec\x82\xbd\xfc\x50\x82\x85\xbf\xdb\xb5\x27\xdc\x16\x3b\x03\x07\x6b\xe2\x55\x76\x86\x45\xf2\xd0\x96\xdb\x20\x7b\x4b\xad\xf4\xe1\x20\x3c\xbb\x98\xfc\x0d\xbc\xd3\xc1\xe7\x21\xf9\x66\xd4\xbc\x07\x9a\xcb\x31\x73\x81\x85\x10\x32\x58\x34\x5e\xe4\xb3\xd2\x48\xa5\xb6\x75\xe5\x2f\x78\x39\xac\x58\x2d\x6d\x64\x76\x3c\x0a\x2a\x4a\x06\xd8\x90\x1f\xe3\x1c\x76\x71\x59\xcb\xa0\xc3\x5d\xa1\x67\xc1\x9b\x71\xae\xf4\x07\x0f\xcc\xb1\xe2\xb4\xd3\xf2\xe8\x06\xf9\x66\x0f\xc0\x15\xd8\xee\xe7\x42\x67\xe4\xf9\xe5\xc8\xc3\x1f\x8c\xd5\x8d\x32\xdd\x38\xf4\x1d\x38\x33\x64\x4f\x8d\xd8\x53\x06\xcf\x4e\x30\x04\xea\x42\xe1\x0f\x00\xac\xda\xbc\xcd\xff\xe8\xdf\x00\x00\x00\xff\xff\x46\xee\x13\x6b\x41\x0e\x00\x00")

func templatesKube_dnsYamlTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesKube_dnsYamlTemplate,
		"templates/kube_dns.yaml.template",
	)
}

func templatesKube_dnsYamlTemplate() (*asset, error) {
	bytes, err := templatesKube_dnsYamlTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kube_dns.yaml.template", size: 3649, mode: os.FileMode(420), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMasterOpensslCnfTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8e\x61\x4b\xc3\x30\x10\x86\xbf\xe7\x57\xf4\x07\x8c\xb0\x6e\x8a\x20\x08\xce\x39\x41\x18\x43\x2c\x7e\x2a\xa5\xa4\xe9\xd9\x9d\xcb\xae\x33\xb9\x0c\x65\xec\xbf\x7b\xa9\x43\x10\x27\x81\x90\x7b\x9f\x97\x3c\x57\x7a\x78\xaf\x94\x5c\x35\x7c\x30\x50\xc0\x9e\x42\x76\x93\xed\xa7\xb5\x64\xaa\xc5\xc0\x48\x5d\xc4\xb0\x86\xb6\x26\xb3\x05\x61\xa9\xfc\x17\xa8\xf2\x7c\x5e\xa9\xf2\xf4\x5b\x56\xa9\xc6\x04\xb4\x73\x51\xb0\x37\x48\x9c\x4c\xf3\xd9\xf5\xc3\x6c\x59\x2c\xd4\x06\x3e\x5f\x82\xe9\x92\x81\x7a\x7a\x86\x5d\x6c\xd1\xb0\xec\x33\xca\x5a\xec\x90\x8d\x2b\xb0\x23\xc3\xd1\xc3\x28\x93\xf2\x82\x2c\xee\xd6\xe0\xb7\x40\xac\x42\x6c\xde\xc0\xf2\xcc\xf1\xea\x7b\xc9\x5b\xe3\x78\xf0\x07\x55\xfe\x3c\x2b\x75\xbf\x2a\x74\x2e\x78\x13\x1b\xf0\x04\x2c\x38\x45\x93\x5f\x91\x6e\xe1\xd5\x44\xc7\x03\x9a\x9e\x45\x3a\xec\xed\x80\x2f\xfe\xc5\xda\xba\x18\x18\xbc\x76\xbd\x35\x6e\x28\x5f\x4a\xf9\x70\xd0\x8b\xe5\x9d\x4c\x69\xd1\xe3\x51\x3d\x3e\x0d\xf6\x7c\x72\xa5\xc7\x72\xf2\x14\x24\x67\x3e\x3e\xcd\x5f\x01\x00\x00\xff\xff\x28\xe0\x21\xc5\xa2\x01\x00\x00")

func templatesMasterOpensslCnfTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesMasterOpensslCnfTemplate,
		"templates/master-openssl.cnf.template",
	)
}

func templatesMasterOpensslCnfTemplate() (*asset, error) {
	bytes, err := templatesMasterOpensslCnfTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/master-openssl.cnf.template", size: 418, mode: os.FileMode(420), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMasterUserDataTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\x7b\x53\xdb\xca\x15\xff\x9f\x4f\x71\xea\x4b\x7b\x93\x86\xb5\x0c\x21\x2f\xdf\xaa\x1d\x07\x2b\x89\xa7\x0e\xa4\xb6\x49\xfe\x60\x32\x1e\x21\xad\xed\x0d\x92\x56\xd9\x5d\x99\x78\x80\xef\xde\x73\x56\x2b\xbf\x0d\xb4\x37\x81\x19\xdb\xda\xc7\x79\x3f\x7e\x47\xbf\x45\x89\x2c\x62\x16\xc9\x6c\x24\xc6\x7b\xd7\x4a\x18\x3e\x1c\x89\x84\xeb\xe6\x1e\x00\x83\x3c\x34\x93\x26\x78\x85\x56\x5e\x22\xa3\x30\xf1\x2e\x45\xe6\x8d\xb9\x19\x5e\xbd\xd6\xc3\x88\x2b\xa3\xeb\x7a\x82\x27\x01\xe4\x75\xc6\x55\x13\x94\x94\xc6\x3e\xe7\x5c\xa5\x42\x6b\x21\x33\xdd\x84\xc6\xab\x17\x2f\xec\x2a\xf2\x31\x3c\x33\x4d\xb8\xb5\x8f\x00\xbf\xfd\xc5\x92\xbc\x0c\xf5\x04\x18\x77\x8b\xe9\x55\x2c\x14\xb0\x1c\x3c\x6e\x22\xef\xaa\xb8\xe4\x2a\xe3\x86\x6b\x4f\xeb\xc4\x1d\x11\x99\x36\x61\x16\xf1\xa1\x88\xfd\xfd\x27\x51\xa1\x12\x38\x7c\xf9\xa6\x7e\xf4\xe2\xb8\xee\xbe\xbd\x24\xc4\x2b\xc6\x4b\xb9\x09\x59\x1c\x9a\xd0\xab\xee\x30\x11\x3f\x75\x64\xc2\x6b\x0d\xfa\x39\x44\x39\x7e\x36\x3d\xef\xe6\xa6\xde\xef\x77\xfb\x46\xaa\x70\xcc\xdf\x16\xd1\x15\x37\x77\x77\xb4\x7a\x92\x14\xda\x70\x75\x1a\xa6\x1c\x17\xf6\x6f\x96\xd8\xdf\xb1\x30\x17\x9a\xab\x29\x57\xf5\x9c\xa7\xdb\x64\xf6\x56\x4e\xfc\x12\xd6\xec\x8a\xcf\x1e\x66\x5f\x9d\xfa\x99\x22\x44\xe1\x4e\xbe\xe5\x96\x63\x16\x4d\x30\x44\x80\x4e\x34\xe9\x63\xeb\x85\xbf\xaf\x9c\x4f\x65\x0c\x8d\x97\x8d\xc6\x83\x47\xf5\x0c\xc5\x4b\x23\x93\x00\xca\xa5\x8c\x65\xb2\x30\xcd\x7d\x87\x28\x1e\x95\x4c\x12\x34\x4d\x1a\x66\xa8\xf6\xbd\xa7\x75\x34\xe1\x71\x91\xd8\x43\x55\x6e\xd4\xd6\x85\x9b\xf3\xad\x6d\xe6\x41\xad\xf1\xf2\xf8\xb8\xb6\x9c\x2f\x35\x4a\x98\xda\x8e\xdc\x80\xc1\x84\x43\x18\xc7\x8a\x6b\x0d\x32\x03\x83\x8f\x36\x0d\xa1\xe4\x00\x46\x42\x22\x50\x50\xdc\x92\x75\x77\xeb\xdf\xe7\x6f\x83\x61\xeb\x53\x67\xd8\x6a\xb7\x7b\x41\xbf\xef\xd7\x18\x43\x87\x71\xcc\x11\xce\x30\xd7\x62\xe6\x28\xfa\x87\x47\xaf\xea\x0d\xfc\x3f\xac\xed\xcd\x39\x9e\xc8\x34\x0d\x91\x7c\x1e\x2a\x4c\x9f\xd8\x92\x07\x39\x82\x4c\xc6\x5c\x63\xd6\x59\x19\x50\xe3\x18\xa2\x32\x28\x96\xb9\x06\x83\x93\xf6\xb0\x1f\xf4\x3e\x07\x3d\xcb\x96\xce\xb1\x52\x54\xed\x4f\x8c\xc9\x31\xc8\xe6\x4c\x9b\xc7\x8d\xc6\x32\xe7\x96\xd3\x53\x85\xd9\x98\x93\x66\x85\xe6\x30\x92\xca\xea\x2a\x22\xe4\xbe\xcc\x8a\xb8\x74\x4e\x82\x4a\xc9\xc0\xf2\x73\x27\x99\x13\x8d\x89\x9c\x59\x6a\x3e\x45\x76\xb9\xe7\x42\xb9\xf3\xa9\x47\x1b\x77\x77\x4b\x02\xc4\x7c\x14\x16\x89\x41\x83\x3b\x87\x81\x8b\x0e\xc8\x65\x22\x22\xc1\xf5\x8a\x85\xdb\x1f\x3b\xfd\x7e\xe7\xec\x74\x78\x72\x76\x3a\xe8\x9d\x75\x49\x80\xf9\xd5\x2a\xb0\x7c\xca\x19\x9d\x87\x11\xef\x8a\x11\x8f\x66\x51\xc2\x0f\xe6\x4b\xc1\x0f\x34\xae\x3e\xe8\x8a\x54\x18\x2b\x8e\x3a\xe8\x93\x9b\x84\x99\x9d\x50\x2c\xfc\x30\x6d\x9e\xcd\x0e\x9c\xe4\xad\x28\x92\x45\x66\x0e\x7a\x5c\xcb\x42\x45\xfc\x3f\x85\x34\x61\xcd\x89\xb4\x6c\x45\x61\x50\x00\x8c\x91\x50\x8d\x35\xd9\x91\x3c\x36\x0f\x4a\x78\x82\x29\xfe\x74\x23\x54\x7a\xef\xad\x01\x17\x85\xc2\xf2\x22\xbb\xb5\x72\xd1\xb7\x4b\x27\xb4\x72\x77\x07\x8c\x95\x2d\x23\x57\x72\x2a\x62\xae\x7c\xaa\x22\x8c\x99\x44\x33\x6a\x08\x8c\xba\x87\xff\x60\x11\x04\x32\x16\xfe\x36\xb8\x36\x0f\xc8\xfd\x5c\x89\x29\x86\xdd\x50\xe4\xd3\x63\x47\xd3\x2d\x51\xe5\x7a\x04\xe9\x79\x19\x24\x29\x05\x66\x13\x96\xa7\xdd\xd7\x5c\xe9\x5a\x04\x4e\x58\xda\xf8\x7f\x64\xb6\xe4\x84\x9d\x55\xa1\x6c\xb0\x3f\xa1\x24\x24\x72\x3c\x16\xd9\x98\x1c\xab\x0d\x9a\x5f\x41\xca\xc3\x4c\xc3\x35\x07\xec\xcb\x20\x4c\x95\xa4\x65\x05\x8b\xe1\x1b\x46\x0b\x86\xc3\xb2\xcb\xbb\x67\xef\x07\x67\xfd\x41\x3b\xe8\xf5\xc8\xeb\x48\xd2\xc8\x92\x98\x6f\x54\xc1\x6b\x73\x66\xee\x2e\xb2\xd0\x1a\x8b\x23\x24\x7c\xca\x93\x03\x68\x80\xd0\x98\x2e\x97\xc5\x78\x8d\xea\xb0\x1b\x7c\x0e\x6c\x26\x4c\xfd\xc6\x82\x4c\x7f\x22\x8b\x24\x46\xa9\xf0\x9a\xcb\x4d\xc0\x0e\x10\x26\x89\xbc\xc6\x1a\x83\xaa\xa8\x22\x03\xf2\x34\xda\x7c\x8c\x2b\xb1\xc4\xe6\xa3\xac\xfa\xa1\x40\xa3\xac\x66\x5e\xb7\x7b\xf6\x65\xf8\xa9\xd7\xf9\x6c\x43\x96\x88\xb0\xc5\xdd\x35\x0d\x3e\xc8\x6b\x6b\x8d\xcd\x42\x7f\x00\xf3\x72\x0e\x23\x2c\x8b\xab\x79\xb2\xcc\xf0\x63\xab\x3f\x08\xac\xa5\xd2\x90\x64\xdf\x2c\x65\xaf\x1b\xaf\x97\xd4\x0d\xb0\xec\xed\x2e\x8b\xee\xf2\x4a\xac\x37\x8f\x9e\xbf\x7a\xf3\xc8\x30\x5a\x53\xe3\x27\x84\xd4\x8e\x9a\xb1\xb3\x37\x5a\xa5\x5c\xd5\xeb\x06\x3d\xb4\xcf\x69\xeb\x3d\x7e\x57\x55\xc4\x59\x69\xd5\x3c\x36\x23\xcb\xb2\x1c\x89\x58\xf9\x0b\x58\x71\xd2\x69\xf7\x6c\x5d\x21\x57\x46\x94\xeb\xd4\x6c\xec\x29\x6d\xbd\xb9\xab\xe4\x54\xf4\x32\x2c\xa8\xfe\x3a\x4c\xd9\x92\xd5\xff\x67\x29\xa9\xfe\x18\x23\x2b\x3e\xa2\xa0\xd4\xe0\x11\x9e\x9c\x07\xdf\xaf\x73\xe0\x32\x5c\x59\x34\xce\x93\x0f\x41\xfb\xbc\xfb\x90\xbb\xb6\x06\xa3\x1d\x03\xc4\xa5\xe7\x4a\x8b\xfb\x26\xcd\xe2\xa3\xba\xb3\xf6\x9f\x56\xe7\xe2\x3c\x13\xe6\xab\x7b\x68\x73\x1d\x29\x91\x93\x72\xbe\x45\x1d\xe4\xbb\x69\x98\x60\x50\x68\xc4\xa9\xd5\xc0\xd0\x96\x51\x91\x22\x95\xd0\x1e\xa4\x0c\xd3\x98\x62\x63\x61\x26\xc5\x65\x3d\x92\x29\xe6\x8d\xe2\x52\x5b\x49\x2b\x36\xae\xad\x56\x9c\x06\x22\xe5\xb2\x30\x7d\x42\x7b\xd8\x85\xfd\x86\x5b\x3f\x47\xbd\xfc\xa5\x7b\x83\x59\xce\xfd\x4c\x1a\x31\x9a\xb9\x95\x20\x9b\x0a\x25\x33\xe2\xef\xdb\x54\x6f\xb7\x06\xad\x61\xbb\xd3\xf3\xbd\x69\x58\x1a\x6c\xe9\xfe\xc6\xe9\xd3\xd6\xc7\xc0\xff\xeb\x87\xcd\xed\x77\x14\x65\xcc\xc6\x0d\x75\x8f\x7a\xbc\x42\xe6\x07\x8f\xac\xac\xbe\xf5\x0a\xcd\x50\x4b\xbb\x88\x11\xec\x5e\x98\x5c\x87\x33\xbd\xba\x48\xca\x1d\x36\xaa\x45\x0b\x3e\x4e\xcf\xde\x75\xba\x81\x8f\x80\xac\x51\xa9\x7d\xd1\x21\x8c\x9f\x24\x95\x79\xbe\x84\xe8\xa6\xf8\xed\xcc\x4f\x11\x22\x09\x86\xd8\x4c\xd5\x91\x1a\xb6\x9c\xe5\x39\x91\xdc\x8a\x83\xe2\x38\xa2\xb2\x11\xa1\x83\x7e\xc5\x74\x88\xfd\x84\xf4\x58\xb4\x12\x64\x08\x8e\x23\xa1\x36\x91\x61\xfc\x57\xcf\x53\x3e\x6f\x62\xa5\x37\xe4\xd8\x73\x0b\x1e\xce\xb0\x0b\xa4\x8d\x29\x13\x8a\xa4\x59\x9d\x26\xe4\xcf\x46\x19\x26\x3d\x8e\xa2\x56\x95\xd9\x7d\x04\xc4\x08\x2e\xa0\xb6\x7f\x58\x03\x1f\x6a\x35\xf8\xfa\x07\x25\x60\xb6\x57\x95\x0e\x8e\xc3\x0f\xd4\xce\xa9\x87\x36\x61\xcd\x3e\xf0\x8f\xb8\x48\x73\xb8\x45\xac\x4b\xad\xec\x9f\x55\xe6\x8d\x84\xfb\x81\x50\x11\xeb\x2f\xb0\xfe\x0c\xa5\xc9\xa4\x45\x12\x2a\x85\x6f\xdf\xdd\x3e\xff\x91\x4b\x9c\x50\x5a\x5f\xfa\xc3\x76\xf0\xae\x75\xde\x1d\x0c\x7b\xc1\x7b\x44\xa6\xd5\x60\xcc\x34\x54\x1d\x6b\xfb\x88\x1c\xcf\xb0\x84\x8a\x68\x79\x40\x46\x37\x20\x0c\xf5\x62\x97\x58\x70\xfb\xed\x3b\x30\x05\x75\xc5\xc7\x68\xe3\xa7\x1b\x83\xfa\x23\x4d\x53\xea\xb8\xc3\x40\xe5\x26\x81\x1b\xa4\xa4\x21\xc4\x9e\x8c\xa6\x97\x2a\x76\x78\xe7\x1e\x26\x00\xef\xce\x08\x16\x74\x06\x7e\xc5\xa3\xb2\x4e\xa2\xf9\x2a\x1b\x9b\x05\x44\x52\x66\x38\x67\x60\xda\x83\x75\x00\x0e\x39\x96\xad\x0d\x9f\x47\xb2\xda\xf0\x95\x46\x08\xf6\xac\xe2\x47\xc3\x8b\xc8\x09\x8f\xed\x3f\xa1\x8e\xc5\xa3\x23\x44\x4d\x54\xd0\x70\x96\xac\x6c\xad\x2b\xd3\xfe\x5e\xc7\x04\xc5\x9a\x64\x6b\x98\xbe\xf8\x5a\xef\x54\x27\x2e\xbe\x62\x74\xd4\x3f\x95\xdd\xab\x93\x57\x83\xd2\x33\xa8\xe1\xff\x33\xdc\x29\x2e\x71\x3e\xd9\xb2\x31\x08\xc7\x44\xe8\xb3\xad\x97\xf3\xd5\x8a\x6e\x27\x5e\xac\x61\x46\x19\x5e\xa7\xce\xf9\x3b\xc0\xed\x58\xf1\x9c\x20\x59\x46\x56\xba\x8d\x0a\x83\xa9\x70\x08\x2c\xb6\xa7\x6f\x35\x45\x1b\x2b\x9e\xfe\x81\x30\x6d\x6e\x93\x1d\xbd\x21\x66\xce\x80\x4c\xf1\x54\x1a\x6a\xe5\x14\x91\x15\x06\xba\x11\xf9\x5d\xf3\xf0\xcd\x8b\xe7\x87\x1e\x06\x99\xc2\x11\xeb\x5f\xfb\x37\x95\x79\xa9\x85\x63\x45\xce\x91\xfd\x36\x77\x50\x83\xcf\x13\x61\x58\x8a\x68\x01\x26\x08\x60\xe1\x6f\x4e\x9c\x18\x3d\xbb\x57\x96\x7c\x7a\x8d\x65\xfb\x53\xd3\xee\xc5\x42\x47\x12\x9b\xfb\xac\x09\x08\x18\xda\xd5\x13\xc2\x05\xbb\xbd\x18\x49\xdc\xf4\x80\xc2\x62\x81\xda\x09\xd9\x0e\xb6\xee\xd0\x60\x6b\xc9\x09\xec\x64\x02\x75\x5f\x90\xcd\x39\x02\x8b\x7b\x89\xbe\x2e\x2b\x70\x39\xd6\x6f\x15\xa3\x61\xdb\x74\x63\x45\x80\x6a\x6d\xce\xda\xdd\x7f\x24\xbf\x02\x05\xd5\xa5\x85\x18\x10\x9c\x6a\xc2\xba\xff\xc6\x78\x07\x9b\x49\x5c\xf5\xf9\xea\x2d\x0d\xbd\x2f\xc8\xe2\x66\x99\x55\x2b\x14\x56\x60\xc1\xc3\xc7\xb1\x95\x30\x74\x2b\x73\x6f\x15\x1f\xba\xb6\xa5\x5b\xac\x61\x87\x55\xf4\x40\xc3\x11\x45\x8d\x25\x0f\x23\x25\x53\xd0\xcf\xe7\x27\x7b\xfc\x7b\x81\x75\x5e\xfb\xdb\x84\x06\x68\x8d\x08\x21\x21\x70\xbb\x96\xea\xca\xf5\xbd\xad\xfa\x6d\xe2\x0a\x87\x18\x30\x22\xf5\x44\x9a\xf9\xe2\x5a\xff\xbe\xe7\xe5\xea\x7f\x03\x00\x00\xff\xff\x98\x3e\x0d\x49\xa2\x15\x00\x00")

func templatesMasterUserDataTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesMasterUserDataTemplate,
		"templates/master-user-data.template",
	)
}

func templatesMasterUserDataTemplate() (*asset, error) {
	bytes, err := templatesMasterUserDataTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/master-user-data.template", size: 5538, mode: os.FileMode(493), modTime: time.Unix(1472166857, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMinionOpensslCnfTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\xc1\x4a\x03\x31\x10\x86\xef\xf3\x14\x79\x80\x52\x10\x6f\x82\xe0\x52\x2a\x14\x44\x8a\x45\x3c\x84\xb0\x4c\x37\x43\x3a\x76\x3b\x5b\x33\x13\x51\x96\x7d\x77\xb3\x2a\x5e\xec\x25\x84\xff\xfb\x99\xef\xf7\x99\xde\x02\xd4\xa7\xa5\x0f\x23\x51\x1e\x44\xdd\xad\x7b\xbf\x6e\x6b\x06\x91\xd5\x58\x52\x61\x3d\x50\x6c\x05\x4f\x54\xd9\x5c\xfe\x0f\xc0\x5f\xce\x03\xf8\xdf\x6b\x2e\xc0\x1e\x95\xbb\x55\x55\x58\x46\x16\x9b\x4d\xab\xe6\xe6\xbe\x79\xd8\xad\xe1\x48\x9f\xcf\x8a\x69\x36\xc8\x20\x4f\x74\x2e\x91\xd1\xea\x9e\x85\x8b\x9c\xd8\xb0\xdf\x71\x12\xb4\x92\x69\xe1\x6a\x79\x2d\x1d\x9f\x0f\x94\x4f\x24\x06\x5a\xf6\xaf\xd4\x59\xd3\xdb\xe3\xcf\xc8\x3b\xec\xed\xdb\xaf\xe0\xff\xbe\x01\x36\xdb\xe5\x55\xa5\xe3\xb8\x7c\x19\xf2\x91\xf2\x66\x3b\x4d\xf0\x15\x00\x00\xff\xff\x22\xc5\x70\x42\x04\x01\x00\x00")

func templatesMinionOpensslCnfTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesMinionOpensslCnfTemplate,
		"templates/minion-openssl.cnf.template",
	)
}

func templatesMinionOpensslCnfTemplate() (*asset, error) {
	bytes, err := templatesMinionOpensslCnfTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/minion-openssl.cnf.template", size: 260, mode: os.FileMode(420), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMinionUserDataTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\x6b\x6f\xdb\x36\x17\xfe\xde\x5f\x71\xde\x24\x1f\xde\x15\xa5\xe5\x66\x6d\xd7\x19\xe0\x07\x27\xf6\x9a\xa0\xce\x05\x76\x92\x6e\x28\x06\x83\x96\x68\x9b\x33\x25\xaa\x24\xe5\x44\xeb\xf2\xdf\x77\x48\x5d\xed\x24\x0e\x86\x34\x05\xe2\x8a\x3c\x97\x47\xcf\xb9\x3a\xfb\xa1\x54\x59\x44\x42\x95\xcc\xc5\xe2\xd5\xad\x16\x96\x4f\xe7\x42\x72\xd3\x7b\x05\x40\x20\x65\x76\xd9\x83\x60\xcd\x74\xa0\xb3\x24\xe0\xe1\x61\x10\x73\xcb\x22\x66\x59\x90\x66\x33\x29\x42\x91\xae\xdf\xa1\x28\x80\xba\x4d\xb8\xee\x81\x56\xca\xfa\xe7\x94\xeb\x58\x18\x23\x54\x62\x7a\xd0\xfd\xe5\xfd\x7b\x7f\x8a\x8e\x2c\x4f\x6c\x0f\xfe\xf1\x8f\x00\x07\x85\x99\x69\x69\xa7\x76\x99\x19\x1d\x48\x15\x32\x19\xcc\x44\x12\x2c\xb8\x9d\xae\x3e\x9a\x69\xc8\xb5\x35\x1d\xb3\x7c\x89\xc7\xfd\xff\x79\x93\x33\x66\x96\x40\x78\x79\x18\xaf\x22\xa1\x81\xa4\x10\x70\x1b\x06\xab\x6c\xc6\x75\xc2\x2d\x37\x81\x31\xb2\x14\x11\x89\xb1\x2c\x09\xf9\x54\x44\xf4\xe0\xff\x61\xa6\x25\xbc\xfd\xf0\x6b\xe7\xf0\xfd\xbb\x4e\xf9\x19\x48\x86\x2a\xd6\x53\x44\x3c\x47\x95\x0e\x11\xd1\x4f\xa5\x19\x76\x6b\xc0\xfc\x0c\x61\x8a\xbf\x7b\x41\xf0\xfd\x7b\x67\x32\x19\x4d\xac\xd2\x6c\xc1\x8f\xb2\x70\xc5\xed\xfd\xbd\x3b\x3d\x96\x99\xb1\x5c\x9f\xb3\x98\xe3\xc1\xc1\xf7\x96\xfb\x7b\x12\x8b\x04\x5f\xb3\x93\xf2\xf8\x31\xc0\x41\x73\xfd\xe3\x9d\x92\x15\xcf\x9f\x71\x5c\x89\xfc\x48\xe7\x21\x7b\xd2\x69\x71\x55\x3a\x0b\x97\x98\x16\xe0\x24\x7a\xee\xd7\xa3\x0a\xaf\x37\xe4\x63\x15\x41\xf7\x43\xb7\xfb\xac\xa8\xc9\x11\x5e\x1c\x5a\x09\x88\x4b\x5b\xef\x44\x72\xbb\xe3\x96\xa4\x5a\xdd\xe5\xed\xb4\xde\x72\x51\xd6\xdd\x0b\xb2\xf9\xf3\xf5\xd1\x70\x3a\xba\xf8\x74\x75\x31\xb9\x1a\x0c\xc7\x63\xba\x47\x88\x54\x0b\xab\x8c\x8d\xb8\xd6\xd4\xea\x8c\xef\x55\x99\x0f\x7f\xa9\x4c\x27\x4c\x42\xcc\x8d\x41\xf6\x41\xf2\x35\x97\x6f\xa0\x0b\xc2\x40\xc4\x67\xd9\x62\xcb\xea\x74\x34\xbc\x19\x8e\x9c\xcd\x35\xed\xee\xb5\x2f\xfb\xa3\xd1\xc5\x97\xe9\xe5\xf8\xf4\xc6\xdd\x32\x29\xd5\x2d\xbe\xad\x58\x63\xef\x58\xf0\x68\xc3\xad\x97\x3f\xeb\x4f\xae\x86\x88\x6e\x69\x6d\x6a\x8a\x2c\x18\x8e\x8e\x06\xe7\x93\x22\xdc\x7b\x3b\x48\x6a\xf3\xfc\x02\x96\x46\xc3\xab\x69\x7f\x30\x18\x0f\x27\x13\x0f\x39\x8a\x34\xb2\x40\x0f\x1c\x6a\xac\x5b\xdf\x81\xf6\xb6\xe4\x4f\x90\xd5\xf3\xfe\xd9\xd0\x29\x2c\x91\xd2\x04\xc1\x12\xb5\x46\x62\x45\xc4\x77\xab\xf6\x2f\x4f\xa7\x93\xe1\xf8\x66\xe8\x43\xc2\x52\x41\x0c\xd7\xa8\x69\xe8\x0e\x0a\x36\x0c\x8c\x3f\x79\xa0\x45\x87\xc6\x4c\x5a\xa3\x4f\x4d\x5d\x35\x11\xe2\x38\x29\x92\x87\xfa\xee\x2c\xc5\xac\xe2\x29\x68\xee\x50\x30\xc1\x72\x8c\x99\xf9\x96\x71\xcd\x22\x4e\x42\x11\x69\xfa\xb6\xdb\xf1\xff\x82\x8f\xe0\xcc\xfb\xaa\x23\x51\x62\x68\x53\x84\x88\xea\xfe\xde\xdd\x7a\x3b\x99\x46\xcd\x99\xee\xfa\xb0\xb6\x75\x54\xcc\x44\x42\xcb\xc7\x8e\xef\xd7\x78\x6d\xa5\x21\xae\x53\x13\x37\x49\xe8\xee\x06\x55\x8a\x97\x4c\xba\xce\xf1\x9c\x56\xdd\x80\x3c\x3a\x8b\x00\x10\x09\x4e\x27\x2b\x62\x4e\x23\x85\xfd\x44\xef\xca\xa6\xaa\x24\x5f\x56\x71\x97\xe3\x8b\xdf\xff\x68\x85\xa8\xe0\xc3\xb3\xdb\x90\x78\x7c\x3a\x18\x7b\x16\xbd\x4f\x82\x8d\x86\x53\x91\x5a\x36\xc3\xf9\xfa\x5f\x62\x88\xff\x49\xac\x66\xe1\x0a\x23\x79\x47\xbb\xdb\x27\x24\x75\xae\x95\xe6\x5b\x57\x36\x4c\x89\x23\x45\x65\x96\xe0\x58\x42\xb7\xc2\x2c\xb1\x36\xbb\x7b\xdb\xb3\xfd\x71\xcf\x2f\x21\x09\xf3\xfd\x06\x73\x1d\xc5\x7a\xb0\x7e\x5b\x1e\xae\x44\x12\xf5\xe0\xb8\x31\x8e\x8a\x05\x53\x7e\xdd\x28\x7e\x48\x75\xd6\x1c\x79\x41\xcc\x27\x31\x17\xa1\x4b\x12\x96\xd9\xa5\xc2\x55\x25\x7f\x18\xdd\x07\xf3\xa0\x6c\xce\xbe\xf4\x7a\xf0\x44\xe9\xb5\x64\x5d\x85\xf7\xa0\xb1\x58\xe1\x74\x2f\x78\x67\x37\x71\x16\x67\x5b\x38\x4b\xf0\x0f\x4d\x14\x3f\x99\xa9\x2e\x9b\xd1\xb1\xe9\x17\xcf\x89\x55\xe4\x21\x84\x4c\x6b\xe4\x98\x54\x6e\x77\x0a\x3b\x37\x1b\x60\x37\xec\xbf\xda\xc2\xb3\xf5\x06\xc2\xbb\x69\x08\x7f\x9c\xe6\x07\x4b\xc6\x86\x3a\x16\xe9\x2e\xb5\x7a\x45\x70\x79\xab\x3c\xd2\x2c\x11\x15\xbf\x15\xdc\x62\xa6\x46\xa4\x1c\x5b\x64\x81\x60\x6e\x59\x1e\x75\x5c\x3c\x45\xc8\xeb\xe0\xc4\x31\x73\xa9\xe5\x27\xef\x86\x85\xa2\x1f\x3c\x2f\xff\x48\x0a\x03\x7c\xbd\x46\x48\x7f\xd6\x8f\x03\x6e\x42\x8d\xf5\x8b\xf0\xe9\xc0\xdb\x85\x7e\x9a\x4a\x47\x11\x1e\xb9\xbc\x2e\x9a\x11\x0c\x93\x05\x7e\x36\x7a\x2a\xcc\x62\x34\xed\xc5\xea\xee\x8f\xc8\x4c\xa7\x84\x87\x80\x6a\xe9\xfe\x1c\xd3\x87\x22\x5f\xb7\x4a\xaf\x3a\x08\x10\x77\xdf\xfa\x35\xdc\x47\x13\xbd\x31\xff\x96\x09\x1c\x62\xf4\xf1\xeb\xaf\x93\xe2\xad\x9b\x37\xb8\xca\x53\x4e\x13\x85\x71\xcd\xeb\xb3\x7d\xb0\x4b\x8e\xc3\x7f\xce\x32\x69\xdd\x1e\x80\xf7\x60\x95\x4b\x8c\x8a\x7f\x98\x2b\x0d\xe1\x42\xab\x2c\x35\x80\xdd\x81\xb9\xbb\x42\x0b\xa7\x3d\xc6\x04\xd5\x4c\x86\x3d\xcd\x58\x21\x65\xcb\x32\xbf\x13\xc6\x1a\x40\xae\x6b\x53\x65\x16\xcb\x1c\xdf\x89\x17\xce\x4c\x96\xa6\x0a\x37\x26\x67\xb1\xf0\x02\x73\xce\x2c\x0e\x1d\xac\x5b\x0b\xba\x78\xcb\xa8\x65\xd7\xe3\xa9\xe8\x36\x80\xcd\x1f\x66\x79\x49\x52\x2d\x36\xbc\xe3\xe1\xc4\x05\xf8\x12\x3b\x23\xf1\x5f\x28\xfc\xde\xaf\xdd\x8e\x86\xd3\x7f\x86\x36\x70\xa6\x79\xd9\x87\x4a\xb4\x56\x28\xcc\x42\xc4\x78\x8c\x51\x26\x27\x30\x8f\x30\x7c\xe0\xd7\x2c\x12\xe1\xdc\xc2\x70\x95\x09\x1a\x01\x31\xd4\xad\x07\x92\xe5\x28\x30\xc3\x2d\x61\xc1\xa9\xf7\x42\x48\xd5\xf9\xe9\x9c\x49\xc3\xfd\x81\x9f\xcc\xf5\xb3\xb3\xe7\x17\x32\x7a\xcb\x74\xb2\x01\x69\xcc\xa5\x62\x11\xf5\x78\x56\xc8\x31\xfa\x81\x93\xeb\x4b\x38\x38\xeb\x9f\x9e\x5f\x9e\x0e\x5a\xdc\x9c\xb0\xb5\x48\x16\xe0\xe6\xfe\xdf\x5c\x2b\x18\x89\x58\xd8\xd7\x06\x7c\xd4\x8c\xeb\xdf\xc8\x5e\xec\xf6\x6a\xc0\xb1\x84\x80\x62\x5c\xfd\x70\xaa\x63\xc8\x59\x18\x2a\x37\x47\x51\xdd\xbd\xc4\x92\xb3\x36\xe9\x22\xf1\x11\x5a\xb9\x62\x96\x1d\xf8\xc2\x31\x32\xae\x92\x38\x46\x37\x33\x4e\xa9\x4a\x11\x34\x15\xa9\x26\x40\xa4\xd8\x0b\x1a\xeb\x9d\xda\xaa\x07\x77\x7e\xf1\xdb\xe9\x68\x48\x05\x8e\x05\xac\xb7\x7c\xeb\x12\x27\xed\xf1\x13\x77\xc7\x17\xe3\x47\xd4\xf6\xe1\x3a\x29\x70\x59\xb8\x62\x66\x65\xce\xd8\x1d\x88\x39\xe4\x18\xa3\x3a\x0d\xd7\xc5\x70\xaa\x72\xcf\x80\xb0\x9d\x96\x85\x8b\x04\x13\xb4\x92\x3d\x3c\xfc\xe0\x53\x98\xcd\x90\x95\x56\xb6\x62\xad\x94\x66\x5a\xaa\x95\xc7\x87\xb8\xae\x8a\x51\xec\xb3\x6b\xc2\x43\xda\x6d\xf9\x73\x79\x5e\x17\x53\xee\x2a\x49\xa1\x03\x66\x6b\x0c\x75\xb1\x60\xb9\xf3\x76\xa9\x18\x50\xf3\x32\xf3\x5b\x25\xd1\xea\x59\x85\x51\x9a\xb7\xe6\xd0\x3e\xf8\x1c\x52\xee\x25\x7d\x19\x17\xea\x98\x0e\x21\x6e\xc4\x6f\xbc\x1f\xdc\xe8\xab\x03\xf4\x5c\xc6\xbe\x70\x59\xdb\xf9\x8c\x56\xce\xdc\x52\x53\x0a\x36\x9d\xe7\xd4\x7d\x75\x93\xb2\xe9\x3c\x5f\x18\x76\xd7\xe8\x28\xa7\x31\x76\x19\x41\xdc\xd4\x29\x7b\xdb\x46\xbb\xc6\x67\x82\xdf\xf3\x49\xf9\x3d\xff\x47\x77\x6d\xd7\x4a\xd1\xbc\x5f\x26\x0c\xcc\xb5\x8a\xf1\x2b\xe9\xce\xce\xfb\x5c\x33\x55\x09\x37\x4b\x65\x9f\xea\x1f\x4f\xff\x05\xe3\xdf\x00\x00\x00\xff\xff\x05\x1e\x10\x14\x79\x11\x00\x00")

func templatesMinionUserDataTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesMinionUserDataTemplate,
		"templates/minion-user-data.template",
	)
}

func templatesMinionUserDataTemplate() (*asset, error) {
	bytes, err := templatesMinionUserDataTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/minion-user-data.template", size: 4473, mode: os.FileMode(493), modTime: time.Unix(1472637028, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8s_certsGenerate_admin_keypairSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\x41\x0e\x82\x40\x0c\x45\xf7\x9c\xa2\xe2\xba\x40\x8c\x26\xb2\x70\x41\x66\xef\x1d\x3a\x43\xa3\x23\x50\x70\x0a\x51\x6e\xaf\x60\x02\xc4\x6e\x5f\xff\x7b\xfb\x5d\x6a\xbd\xa4\x96\xf4\x1e\x45\x6d\xc7\xa2\x5a\xc3\x8d\x25\x28\x01\xb6\x43\x0f\x54\x36\x5e\xb0\xe2\x31\xe9\xb8\x81\x43\x76\x3c\x2f\x6f\x81\x9f\x80\xc2\x2f\x98\xf0\xdf\xe3\xba\x4d\x9c\x06\x40\x1d\xec\x03\xe2\xd4\x5c\x2f\xd5\x60\x19\x67\x12\x2f\xa6\xf7\x29\xcb\x01\x67\x9f\x97\xed\xcc\x14\xe0\xe8\x27\x34\xc5\x54\x71\xb4\x26\x4c\xe1\x02\x53\xcf\xca\xc1\x53\xbd\x4d\xce\xb8\xa4\x51\x21\xff\x5e\xf4\x09\x00\x00\xff\xff\x47\x01\xe0\xf2\xe5\x00\x00\x00")

func k8s_certsGenerate_admin_keypairShBytes() ([]byte, error) {
	return bindataRead(
		_k8s_certsGenerate_admin_keypairSh,
		"k8s_certs/generate_admin_keypair.sh",
	)
}

func k8s_certsGenerate_admin_keypairSh() (*asset, error) {
	bytes, err := k8s_certsGenerate_admin_keypairShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s_certs/generate_admin_keypair.sh", size: 229, mode: os.FileMode(493), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8s_certsGenerate_api_keypairSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8e\xb1\x52\x85\x40\x0c\x45\xfb\xf7\x15\xf1\x59\x07\x18\x11\x47\x0b\x0b\x66\x7b\x7f\xc1\xc9\xae\x01\x57\x30\x8b\x1b\x40\xf8\x7b\x01\x1d\x54\x46\xdb\xdc\x9b\x7b\xce\xe5\x45\x6a\xbd\xa4\x96\xf4\xf9\x74\x0a\x1d\x8b\x6a\x0b\x35\x4b\x54\x02\x0c\x43\x0f\xd4\x79\xe5\x38\x72\xc4\x86\xe7\xa4\xe3\x57\xb8\xca\xae\x6f\xf7\x6a\xe4\x37\x40\xe1\x77\x58\xe3\x3f\xca\xbf\x37\x12\xa7\x11\x50\x07\xfb\x02\xe7\xd4\x3c\xdc\x37\x83\x65\xdc\xd3\x33\xa0\x0b\x52\xf9\xfa\xc7\xce\x17\x27\x71\x52\xed\xcc\xa9\xc8\xee\x00\x37\xb2\x97\xe3\xb8\x29\xc1\xd1\x27\xda\x94\xab\x93\xa3\x6f\x19\x53\xba\xc8\xd4\xf3\xf2\xe0\xa9\x3d\xca\x6d\x95\x27\x9a\x15\xf2\x9b\x02\x90\xa7\x7e\xe1\xf9\x20\x0a\x63\xfe\xb8\xe1\x96\x53\xe5\x5b\xfe\xc7\xef\x23\x00\x00\xff\xff\xa3\xc1\xb7\xae\x4c\x01\x00\x00")

func k8s_certsGenerate_api_keypairShBytes() ([]byte, error) {
	return bindataRead(
		_k8s_certsGenerate_api_keypairSh,
		"k8s_certs/generate_api_keypair.sh",
	)
}

func k8s_certsGenerate_api_keypairSh() (*asset, error) {
	bytes, err := k8s_certsGenerate_api_keypairShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s_certs/generate_api_keypair.sh", size: 332, mode: os.FileMode(493), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8s_certsGenerate_caSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\xca\x2f\x48\xcd\x2b\x2e\xce\x51\x48\x4f\xcd\x2b\x2a\x4e\x54\xd0\xcd\x2f\x2d\x51\x48\x4e\xd4\xcd\x4e\xad\xd4\x2b\x48\xcd\x55\x30\x32\x30\xb1\x80\xab\x29\x4a\x2d\x54\xd0\xad\x30\x35\xb0\x54\xd0\xcd\x4b\x2d\x07\x12\xf9\x29\xa9\xc5\x0a\x20\xb5\xc8\x5a\x74\x53\x12\x2b\x8b\x15\x0c\x0d\x80\x00\x66\x1c\x44\xbc\xb8\x34\x29\x4b\x41\x49\xdf\xd9\xcf\x36\xbb\x34\x29\x55\x37\x39\x51\x89\x0b\x10\x00\x00\xff\xff\xd2\x43\x2c\x84\x8b\x00\x00\x00")

func k8s_certsGenerate_caShBytes() ([]byte, error) {
	return bindataRead(
		_k8s_certsGenerate_caSh,
		"k8s_certs/generate_ca.sh",
	)
}

func k8s_certsGenerate_caSh() (*asset, error) {
	bytes, err := k8s_certsGenerate_caShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s_certs/generate_ca.sh", size: 139, mode: os.FileMode(493), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8s_certsGenerate_minion_keypairSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\x4d\x92\x82\x30\x10\x85\xf7\x73\x8a\x1e\x66\x1d\xa0\x66\xc6\x2a\x59\xb8\xa0\xb2\xf7\x0a\x56\x88\x0d\x46\xa1\x83\x69\x50\xb8\xbd\x01\x14\xc5\xb2\x97\xfd\x7e\xbe\xf7\xf3\x1d\x65\x86\xa2\x4c\xf1\xe1\xcb\xd6\x48\xcc\x25\x14\x48\x8e\x15\x08\xdb\x36\x50\x19\x32\x96\xc4\x09\xfb\xb0\xc6\x0a\x7e\xe3\xff\xf5\xec\x73\x78\x06\x41\x78\x85\x41\x7e\x77\xbe\xa4\x43\xcd\x0e\x04\xb7\xd9\x11\x82\x48\x6e\x37\xd3\x37\x00\xa1\x2d\xe5\xa6\x78\x24\xef\xb5\xa1\xa6\x7c\x46\x74\xab\x38\x01\x31\x82\x0c\x2d\xea\x64\x0a\x5a\x4d\x24\x99\x0e\x7c\xad\x9e\x6c\x99\x6a\x87\xaa\x41\x46\x67\x54\xb9\xd8\x32\xea\x7b\xd5\x33\x24\xfe\x40\x60\xd7\x78\x94\x57\x18\x2e\x7f\xbb\x91\xe4\x5f\xb9\x29\xf1\xd3\xae\x5b\x00\x00\x00\xff\xff\x41\x9d\xd6\x24\x2f\x01\x00\x00")

func k8s_certsGenerate_minion_keypairShBytes() ([]byte, error) {
	return bindataRead(
		_k8s_certsGenerate_minion_keypairSh,
		"k8s_certs/generate_minion_keypair.sh",
	)
}

func k8s_certsGenerate_minion_keypairSh() (*asset, error) {
	bytes, err := k8s_certsGenerate_minion_keypairShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s_certs/generate_minion_keypair.sh", size: 303, mode: os.FileMode(493), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x93\xcb\x6e\xdb\x3a\x10\x86\xf7\x7c\x8a\x39\xf2\x22\xa7\x0b\x2a\x92\xe2\xb8\xc8\x42\x0b\x23\x2d\x8a\xa0\x70\x1b\xc4\x85\xf7\x94\x34\x56\x08\xcb\xa4\xc1\x8b\x8d\xf4\xe9\x3b\x24\x65\xb5\x0e\x6a\x74\x61\x79\x34\x97\xef\x1f\xfd\xa2\x66\xb0\x3c\x59\x78\xc1\x5e\x6a\xc5\x4c\xfc\xab\x33\x6f\xf9\x09\xad\xe3\x55\xc6\xd8\x0c\xbe\x1f\xd1\x18\xd9\x21\x2c\x57\x4f\x20\x3b\x36\x13\x7b\x59\x67\x74\xe1\xdd\x43\xb5\xc0\xa6\x79\x88\x6d\x1d\x6e\xa5\x42\xd8\x3c\x3f\x42\x23\x2c\xc2\x7f\x6c\x76\x3c\xb4\x3c\xc4\x75\x56\x7e\xac\xf2\xbb\x32\xa3\x36\xf7\x8a\x2a\x5c\xc0\x90\x02\xe8\x6d\x88\xa9\x7b\x10\x7b\x04\x8b\xce\x49\xd5\x5b\x68\x85\x82\x1e\x5d\x60\x0a\x3f\x38\xec\xc0\x69\xb8\x2d\x17\x20\x54\x07\xb7\xd5\x3c\xe8\x05\x21\xd1\x75\x84\xb1\x60\x84\xea\x31\x07\xf8\xdc\xe7\xb0\x4c\x77\xd0\xa0\x3b\x21\x69\x41\xd0\x2e\x17\x79\x91\x17\xc0\x21\x2d\x92\x57\xf7\xf7\xe1\x07\x2c\xac\xd8\xca\xce\xf0\x66\xd0\xed\xee\xbc\x68\x68\x26\xb9\xf8\x5c\x6b\xdf\x28\x74\x96\x29\xbf\xe7\x36\xc5\xf5\x1d\x4b\x11\x2f\xe2\xf0\xc5\x58\x35\xcf\xce\xd5\xf2\xb2\x5a\x5e\x56\xab\xcb\x6a\x35\x56\x49\xf2\x87\xe8\x61\xd0\x7a\xe7\x0f\xe0\x2d\x19\x12\x12\xf5\x57\xdf\xa0\xa1\x39\xb4\x8f\x83\xb7\x0e\x4d\xbd\x11\x83\x47\xd6\xa6\x3b\xae\xc8\xc1\x3a\x1b\x84\x57\xed\x2b\x1f\x8d\x4b\xb4\x60\x76\xb4\x64\x37\x21\xe0\x24\x87\x81\xe0\x08\x5b\x6d\xe2\xeb\x40\xe5\xa4\x41\x18\x69\xf9\x84\x1d\x77\x2c\xf2\x6a\x3e\xff\xd3\x96\x7f\x53\x05\xc5\x37\x16\xcd\x51\xb6\x68\x6f\xd8\x18\xf1\x33\x58\x1e\x78\x9c\x8f\xf0\xe2\x3d\x7a\xec\x86\xa7\x67\xda\x4e\xb8\xab\x22\x9f\xbe\xad\x73\x58\x11\x91\xde\x37\x9d\x8e\xe9\x44\xc8\x74\xc8\xae\x89\xfe\x7e\xbe\x4e\xd9\x69\x83\xb2\x88\xfa\x2b\x11\x2a\x30\xda\x0c\x6b\xf9\x13\xd9\x5e\x24\x37\xc6\x29\x4b\x39\x1a\xcb\xce\x79\xa9\xac\x13\x8a\x84\xdc\xdb\x81\x0a\xae\xca\xf7\xb2\x35\x3a\xe1\xa4\xa2\xaf\xea\x1d\x2e\xe6\xfe\x82\x4b\xf9\xab\xb8\x89\xf6\xa2\xb5\x83\x8d\x1e\x7c\xf8\x6c\x68\x1a\xfe\xa7\x27\xfe\x22\x7b\xd1\xbc\x91\x47\x1f\xce\x20\x43\x6d\xfc\x18\xdb\x92\x48\x59\x14\xec\x57\x00\x00\x00\xff\xff\x05\x41\x8b\x3c\xf4\x03\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1012, mode: os.FileMode(420), modTime: time.Unix(1471059577, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/assume-role-policy-document.json": templatesAssumeRolePolicyDocumentJson,
	"templates/dot-kube-config.template": templatesDotKubeConfigTemplate,
	"templates/kube-master-iam-policy.json": templatesKubeMasterIamPolicyJson,
	"templates/kube-minion-iam-policy.json": templatesKubeMinionIamPolicyJson,
	"templates/kube_dns.yaml.template": templatesKube_dnsYamlTemplate,
	"templates/master-openssl.cnf.template": templatesMasterOpensslCnfTemplate,
	"templates/master-user-data.template": templatesMasterUserDataTemplate,
	"templates/minion-openssl.cnf.template": templatesMinionOpensslCnfTemplate,
	"templates/minion-user-data.template": templatesMinionUserDataTemplate,
	"k8s_certs/generate_admin_keypair.sh": k8s_certsGenerate_admin_keypairSh,
	"k8s_certs/generate_api_keypair.sh": k8s_certsGenerate_api_keypairSh,
	"k8s_certs/generate_ca.sh": k8s_certsGenerate_caSh,
	"k8s_certs/generate_minion_keypair.sh": k8s_certsGenerate_minion_keypairSh,
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
	"k8s_certs": &bintree{nil, map[string]*bintree{
		"generate_admin_keypair.sh": &bintree{k8s_certsGenerate_admin_keypairSh, map[string]*bintree{}},
		"generate_api_keypair.sh": &bintree{k8s_certsGenerate_api_keypairSh, map[string]*bintree{}},
		"generate_ca.sh": &bintree{k8s_certsGenerate_caSh, map[string]*bintree{}},
		"generate_minion_keypair.sh": &bintree{k8s_certsGenerate_minion_keypairSh, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"assume-role-policy-document.json": &bintree{templatesAssumeRolePolicyDocumentJson, map[string]*bintree{}},
		"dot-kube-config.template": &bintree{templatesDotKubeConfigTemplate, map[string]*bintree{}},
		"kube-master-iam-policy.json": &bintree{templatesKubeMasterIamPolicyJson, map[string]*bintree{}},
		"kube-minion-iam-policy.json": &bintree{templatesKubeMinionIamPolicyJson, map[string]*bintree{}},
		"kube_dns.yaml.template": &bintree{templatesKube_dnsYamlTemplate, map[string]*bintree{}},
		"master-openssl.cnf.template": &bintree{templatesMasterOpensslCnfTemplate, map[string]*bintree{}},
		"master-user-data.template": &bintree{templatesMasterUserDataTemplate, map[string]*bintree{}},
		"minion-openssl.cnf.template": &bintree{templatesMinionOpensslCnfTemplate, map[string]*bintree{}},
		"minion-user-data.template": &bintree{templatesMinionUserDataTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

