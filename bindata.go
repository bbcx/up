// Code generated by go-bindata.
// sources:
// config/config.toml
// templates/assume-role-policy-document.json
// templates/dot-kube-config.template
// templates/kube-master-iam-policy.json
// templates/kube-minion-iam-policy.json
// templates/kube_dns.yaml.template
// templates/master-openssl.cnf.template
// templates/master-user-data.template
// templates/minion-openssl.cnf.template
// templates/minion-user-data.template
// k8s_certs/generate_admin_keypair.sh
// k8s_certs/generate_api_keypair.sh
// k8s_certs/generate_ca.sh
// k8s_certs/generate_minion_keypair.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\xcf\x6e\xdb\x30\x0c\xc6\xef\x7a\x0a\xc2\x3b\x74\x3b\x48\xb3\xdd\x34\x43\x0f\x3e\x14\xdd\x30\x14\x43\x86\xa2\x19\x72\x97\x6d\xd6\x15\x62\x4b\x81\xfe\x24\xe8\x9e\x7e\x8c\xa4\x78\x4b\xb1\xa0\x87\x24\x14\x3f\xf2\xf7\x89\x8c\x3e\xc0\xdd\xc1\xc1\x13\x0e\xca\x68\x66\xe3\x4f\x53\x04\xc7\x0f\xe8\x3c\xaf\x0b\xc6\xa8\x60\xf5\x00\xaa\x67\x72\x52\x4d\x41\x5f\xbc\xbf\xad\x97\xd8\xb6\xb7\x51\xdc\x3c\xde\x83\xec\x7b\x8b\xce\x81\x95\x7a\x40\x01\xf0\x6d\x10\x70\x97\x4e\xd0\xa2\x3f\x20\x6a\x80\xea\x4b\x2d\xaa\xa5\x28\x45\x09\x3c\x1e\xae\x2b\x51\xdf\xdc\x1c\x3f\xc0\xf6\xbb\x8e\x77\xaa\xb7\xbc\x1d\x4d\xb7\x6d\x8a\xac\x53\xf1\xe7\x6a\x19\x7d\xd6\xa1\xd5\xe8\x1d\xd3\x61\xe2\x2e\xc5\xcd\x35\x4b\x11\x2f\x63\xf3\x59\x5b\xbd\x28\x4e\x6a\x75\xae\x56\xe7\x6a\x7d\xae\xd6\x59\x25\xcb\x5f\x72\x80\xd1\x98\x6d\xd8\x41\x70\x4a\x0f\xc7\x44\xf3\x23\xb4\x68\xa9\x0f\xdd\xfd\x18\x9c\x47\xdb\x6c\xe4\x18\x90\x75\xe9\xc4\xb5\x9c\xb0\x29\x46\x19\x74\xf7\xc2\x7b\x7c\x96\x61\xf4\x89\xf6\x82\x79\x25\xdb\x19\x01\x07\x35\x8e\x04\x47\x78\x36\x16\x3c\x55\xa0\xf6\xca\x22\x64\x9a\x98\xb1\xf9\x8e\xa5\xa8\x17\x8b\x7f\xd7\xf2\x3e\x55\x52\x7c\xe5\xd0\xee\x55\x87\xee\x8a\xe5\x88\x9f\xc0\x6a\xc7\x63\x7f\x84\x97\x6f\xd1\xb9\x1a\x1e\x1e\xe9\x76\xd2\x5f\x34\xf9\xfa\x73\x2d\x60\x45\x44\xfa\xbf\x41\xea\xf9\x45\x28\x1d\xa7\xba\x64\xfa\x77\xbe\x5e\xbb\xf9\x06\x55\x19\xfd\x57\xf2\xa8\x40\x5e\x33\xac\xd5\x6f\x64\x93\x4c\xdb\xc8\x5d\x8e\x72\xd4\x56\x9c\xf2\x4a\x3b\x2f\x35\x19\xf9\xd7\x1d\x09\xbe\x16\x93\xea\xac\x49\x38\xa5\xe9\x6d\xbf\xc1\xc5\xdc\x7f\x70\x29\x7f\x11\x37\xd3\x9e\x8c\xf1\xb0\x31\x63\x98\x68\x48\xea\x86\x8f\x34\xf1\x77\x35\xc8\xf6\x95\x76\xf4\xe9\x04\xb2\x54\xc6\xf7\xb1\x2c\x99\x54\x65\xc9\xfe\x04\x00\x00\xff\xff\xbf\x61\xf5\xd0\x7a\x03\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 890, mode: os.FileMode(420), modTime: time.Unix(1470693846, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesAssumeRolePolicyDocumentJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x8e\xbd\xaa\xc3\x30\x0c\x85\xf7\x3c\x85\xd1\x7c\x13\x12\x2f\x17\xb2\x79\xe8\x5e\x5a\xe8\x52\x3a\x18\xa1\x80\xc1\x3f\xc5\x72\x1b\x68\xf0\xbb\xd7\x76\xd3\x2e\x67\x38\xdf\xa7\x83\xb6\x4e\x08\xb8\x50\x64\x13\x3c\xcc\x02\xe4\x38\xc9\x7e\x1a\xfb\xe9\x1f\xfe\x2a\x3a\x27\x9d\xc8\x91\x4f\x05\x5e\x4b\x21\xc4\xd6\xb2\xa0\xc3\xb2\x10\xd6\x1e\x94\xb5\x61\x6d\x7e\x03\xc7\x68\x3c\x9a\xbb\xb6\x85\x7d\xed\x3a\x45\xf1\x69\x90\xea\x01\xa1\x1c\xb4\xd3\xaf\xe0\xf5\xca\x03\x06\x07\xbb\x96\x7f\x23\x0a\xd3\xfe\x12\x27\x9e\x15\xf3\xc3\xd1\x29\x58\xfa\x98\xb9\xe4\xad\xcb\xdd\x3b\x00\x00\xff\xff\x83\x74\x15\x01\xbf\x00\x00\x00")

func templatesAssumeRolePolicyDocumentJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesAssumeRolePolicyDocumentJson,
		"templates/assume-role-policy-document.json",
	)
}

func templatesAssumeRolePolicyDocumentJson() (*asset, error) {
	bytes, err := templatesAssumeRolePolicyDocumentJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/assume-role-policy-document.json", size: 191, mode: os.FileMode(420), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDotKubeConfigTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\x41\x6e\x83\x30\x10\xbc\xfb\x15\xfe\x00\x95\x7a\xf5\xad\xe2\xd8\x56\xaa\x2a\xb5\xd7\xca\x75\x96\xb0\x22\xb1\xd1\x7a\x4d\x82\x10\x7f\x8f\x6d\x8c\x82\x10\x9c\x96\x9d\xd9\x99\xf1\xe8\x1e\x7f\x81\x3c\x3a\xab\xe4\xf0\x2a\xcc\x25\x78\x8e\xff\x4a\x54\xb2\xcc\x4a\xc8\xf8\x19\x20\xc6\x06\x8d\x66\xa8\x74\xe0\xd6\x11\xf2\xa8\xe4\x34\xbd\xd4\x11\x79\x5b\x37\x5f\x9a\xdb\x79\xce\x17\x1e\x68\x88\xd7\x89\xf2\xa9\x93\xd0\xcf\xf7\x47\x86\xac\xbe\x82\x92\xfa\xe6\xff\xba\xf0\x0f\x64\x81\xc1\x0b\xe3\x2c\xc3\x9d\x17\xe3\x65\x2e\xc6\x25\xc5\xfe\x20\x61\xc1\x1f\x02\xc7\x06\x81\x08\x2c\x57\xab\xf8\x1e\xef\xd0\x9e\x94\xac\x9d\x6d\xf0\x2c\x7a\x82\x06\x22\xdd\x80\x8f\x0f\x98\x45\x32\xca\xd1\x0e\xa5\x4b\x90\x12\x17\xb3\xcb\xb3\xae\xa5\xa4\xbc\x4e\x55\x6d\x1a\x2a\xdc\x0e\xc6\x0d\xe7\x1d\xd6\x12\x1f\x01\x00\x00\xff\xff\xe8\xf5\x64\x7d\x9b\x01\x00\x00")

func templatesDotKubeConfigTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesDotKubeConfigTemplate,
		"templates/dot-kube-config.template",
	)
}

func templatesDotKubeConfigTemplate() (*asset, error) {
	bytes, err := templatesDotKubeConfigTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot-kube-config.template", size: 411, mode: os.FileMode(420), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesKubeMasterIamPolicyJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x8e\x3d\x6b\xc5\x20\x14\x40\xf7\xfc\x0a\xb9\x63\x48\xda\x7c\x0c\x05\xb7\xb4\x74\xed\xd0\x40\x97\xd0\xe1\xd6\xde\x94\x50\xa3\xa0\x86\x0c\xe2\x7f\xef\x8d\x0d\x6f\x7a\xd3\x83\xb7\x88\x9e\x73\x3d\x1a\x0b\x21\xe0\x83\x9c\x5f\xac\x01\x29\xa0\x6b\xda\xae\x6e\x9b\xba\x7d\x82\xea\x50\x63\xc0\x40\x2b\x99\xc0\x72\x62\x20\x44\xcc\x2b\xab\xd7\x79\x26\x75\x70\x18\xb4\xb6\x7b\x9e\xcf\x62\x50\xe1\xbf\x36\x01\xa9\x4e\x96\xf0\x79\x51\xef\xe4\xed\xe6\x14\x65\xc9\x22\xf3\x54\xdd\x10\xd6\xe8\xc3\xa2\xb4\xc5\xef\x2f\xd4\x68\xd4\x62\x7e\xee\xf1\x12\xf8\x9e\xb3\x57\xab\x27\x63\x8a\xce\x48\xdc\xbd\xe4\x59\x29\x63\x7c\x18\xfb\xe7\x4d\xfd\x52\x48\xe9\x91\x4f\x2f\x7a\xf3\x81\xdc\x1b\xae\xc4\xa0\x84\xf3\xde\xf9\xa3\xe2\xd8\xa5\xe2\x2f\x00\x00\xff\xff\x20\xd8\x9f\x23\x88\x01\x00\x00")

func templatesKubeMasterIamPolicyJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesKubeMasterIamPolicyJson,
		"templates/kube-master-iam-policy.json",
	)
}

func templatesKubeMasterIamPolicyJson() (*asset, error) {
	bytes, err := templatesKubeMasterIamPolicyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kube-master-iam-policy.json", size: 392, mode: os.FileMode(420), modTime: time.Unix(1470691237, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesKubeMinionIamPolicyJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\x4f\x4b\xf3\x40\x10\xc6\xef\xfd\x14\x61\x8f\xa5\x7d\xdf\xfe\x39\x08\x7b\x4b\x5b\x15\xa1\x88\xb4\xda\x8b\x78\x98\xae\x53\xb3\x74\x93\x91\xdd\x89\xa5\x86\xfd\xee\x6e\x96\x18\xa5\x2d\x82\x42\x2f\x09\x79\x9e\xdf\x3c\x33\x64\xa6\xea\x24\x89\x58\xa1\x75\x9a\x0a\x21\x13\x31\x1a\x0c\x47\xfd\xe1\xa0\x3f\xbc\x10\xbd\xda\x5a\x32\x30\xe6\x58\x70\x30\x1f\x83\x90\x24\x55\x7c\x06\xeb\x72\xb3\x41\x55\xeb\x22\x35\x86\x76\x91\x8f\x46\xaa\xb8\x49\x73\x63\xd9\xfd\xd2\x17\xe8\xa8\xb4\x0a\xdb\xa8\xa8\x82\x2d\x24\xec\x9c\x0c\xac\x94\x55\xf5\x6f\x39\x9e\x94\x6a\x8b\xec\xfd\xff\xf0\x35\x35\xa5\x63\xb4\xb7\x90\xa3\xf7\x5d\xd1\x94\x3d\xc5\xb7\xef\xfd\x7a\x20\x54\x23\x39\x43\xa7\xac\x5e\xe3\xe9\xc9\x44\xd3\xe4\x8f\xe1\x29\x33\xa8\x6c\x45\xa6\xcc\xf1\x1c\xf9\x33\x3c\x5b\xfe\xb7\x9d\xa0\xb2\xf2\x1a\x39\x2d\x39\x23\xab\xdf\xa1\x26\xee\x69\x8b\x45\x5b\xd6\x40\x13\x60\x95\x4d\x33\x54\xdb\x39\xec\xd1\xa6\x6f\xa0\x0d\xac\xb5\xd1\xbc\x3f\x44\x43\xde\x8c\x76\x85\x21\x78\x7e\xb0\xe6\x8a\x6c\xac\x38\x41\x2d\xf0\x95\x9c\x66\xb2\xfb\x3b\x32\x5a\x1d\x05\x7d\xee\xaf\xe5\x34\xba\x43\x66\xae\x1d\xdf\xe4\xf0\x72\xec\xc4\x89\x43\x97\xe8\xb6\xf7\xf4\xe3\x9f\xec\xd4\x07\xe7\x3b\x1f\x01\x00\x00\xff\xff\x63\xaa\xb3\x63\x2b\x03\x00\x00")

func templatesKubeMinionIamPolicyJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesKubeMinionIamPolicyJson,
		"templates/kube-minion-iam-policy.json",
	)
}

func templatesKubeMinionIamPolicyJson() (*asset, error) {
	bytes, err := templatesKubeMinionIamPolicyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kube-minion-iam-policy.json", size: 811, mode: os.FileMode(420), modTime: time.Unix(1470691252, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesKube_dnsYamlTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x49\x6f\xeb\x36\x10\xbe\xfb\x57\x10\xee\xb5\xd4\xe2\x24\x2f\xae\x00\xf7\xf2\x0c\xb4\x45\x9b\xc2\x78\xc9\xeb\xb5\xa0\xa9\xb1\x4d\x98\x12\x55\x92\x32\xea\x06\xf9\xef\x1d\x6a\x0b\xe9\x38\x5e\x5e\x73\x28\x73\x08\x34\x1b\x67\xf9\x66\x38\x66\x95\xf8\x03\xb4\x11\xaa\xcc\xc8\x2e\x1d\x6d\x45\x99\x67\xe4\x11\xf4\x4e\x70\x18\x15\x60\x59\xce\x2c\xcb\x46\x84\x94\xac\x80\x8c\x6c\xeb\x25\xd0\xbc\x34\x1d\xc1\x54\x8c\xf7\x54\xb3\x37\x16\x0a\x64\x48\xb6\x04\x69\x9c\x0e\x21\xdb\xa9\xa1\xac\xaa\x02\x45\xd2\x7c\xe8\x12\x2c\x98\x48\xa8\x98\xcb\x1a\x35\x35\x35\xed\xad\x19\x19\x5b\x5d\xc3\xf8\x88\x64\xeb\xc3\xf8\x57\x24\xce\x7f\x7f\x1c\x8f\x4c\x05\xdc\xdd\x63\x40\x02\xb7\x4a\xbf\x7f\x67\x77\xc7\x2f\x8b\x8c\xa4\x49\xe4\xfe\xd2\x04\xc9\x95\xd2\xb6\xf1\x94\x76\xf1\xf5\x1e\x3a\x46\x46\xee\x6e\xda\x0f\xad\xac\xe2\x4a\x66\xe4\xeb\x7c\x11\x0a\x53\xcb\xab\x53\x0a\x4f\x9f\x17\xa3\x11\xa5\x74\x34\x3a\x9a\xe8\x2f\x50\x49\xc1\x99\x45\xea\x67\x55\x5a\xad\xa4\x04\x7d\x22\xed\x74\x97\xa6\xff\x2d\xf5\xbb\x57\x1f\xd2\x2b\x6a\xd1\x67\x5a\xb7\x0e\x1b\x4c\xe3\x45\x79\x7f\x73\x21\xfa\x59\x49\x66\xa1\x55\xf1\x23\x75\xc7\xf7\xff\x7d\x93\x47\xe3\xb8\x0e\x57\x7d\x3c\xee\x70\xcc\x3c\x13\x25\x1a\xec\x29\x7d\x81\xc1\xf2\x7c\x30\x2e\x0a\xb6\x46\xda\x9a\x6b\x67\x7c\xad\xd4\x5a\xc2\x9f\xaf\xba\xb1\x13\xa6\xac\xc8\x3f\xdd\x66\x93\x68\x12\xbd\x7a\xa5\xc1\xa8\x5a\x73\xf0\xe2\xc2\x48\x45\x21\x6c\x40\x41\x47\xaa\xda\xc1\x33\x29\x02\x6a\x01\x85\xd2\x7b\xc4\x56\x92\x3c\x08\x8f\xa3\xe1\xaf\x1a\xcc\xb5\x36\x3c\x13\x5c\x15\x05\x43\x14\x0e\x04\x4a\xe2\xda\xe8\x58\x2a\xce\x64\xbc\x14\x65\x1c\xc4\x4f\x09\x75\xa5\xa2\xb9\xd0\xbe\xc6\x8e\xe9\x46\x2e\x76\x4c\x5f\x58\x0a\xcc\x7e\x49\xb9\x14\x50\x5a\x5a\x6b\x69\x3c\xee\xc6\xda\x2a\x8b\xe3\x74\x72\xdf\x36\x63\x36\xb9\xb9\xff\xe1\xfb\x37\xd4\xdb\x24\x49\x7d\x9b\x2c\xc7\xba\x5b\x61\xe0\x63\xcd\x8a\x52\x58\xc1\x24\xed\x11\x63\xd5\x16\x4a\x4f\xc0\x6c\xf7\xae\xf9\x82\x74\xec\x94\xac\x0b\x78\x50\x75\xe9\x97\xc0\x47\x0e\x35\xd8\x1a\x88\x19\xaf\x12\x85\x13\x5f\x30\xbb\xc9\x8e\x27\x8e\x7a\xfd\x3e\xc1\x5b\x2f\x06\x5f\xaf\x90\xa5\x51\x7a\xfb\xd1\xc8\x9b\x7c\x34\xf2\xa4\xd8\x41\x09\xc6\x2c\xb4\x5a\x82\x6f\xc5\x55\xea\x27\xb0\xa1\xe1\xaa\xcd\xd7\x06\x98\xb4\x9b\x7f\x42\x56\x33\x75\xa7\xc9\x34\x09\xc8\x86\x6f\xc0\xa5\xf1\xe7\xa7\xa7\x85\xc7\xe8\xca\x3c\x07\xc9\xf6\x8f\x80\xd9\xcb\x71\x8e\x7d\xf2\x55\xad\x28\x40\xd5\x76\x60\xde\x79\x3c\x53\x73\xcc\xa4\x79\xda\x60\x56\x37\x4a\xe6\xed\x08\xec\xcf\x8a\x09\x59\x6b\xf0\xb8\x77\x5e\x19\x58\x2e\xae\x8e\x77\xd0\x3a\x1e\x71\xfa\xcd\x11\xdf\x5c\x16\xf1\x69\x80\xb7\xef\x8e\x91\xef\x80\x1b\x81\x1d\xbf\x4e\xe3\xd8\x17\x0c\x2c\xe0\xad\x2b\xb1\x3e\xd1\x21\x52\x2c\x1b\x43\x12\x6c\xf3\xff\x40\x81\xe9\xb5\xe7\xdc\x77\xfd\x4c\x23\x33\x32\x1e\x7a\x62\xec\xb7\x3a\xcd\x55\x81\x3d\x33\xeb\x5a\x3d\x6a\x86\x5d\x20\xd0\xf8\x55\xb0\x66\x10\xe0\x78\x99\x3d\x3f\x47\x0f\xcd\xd7\xd7\x2f\xbf\xbd\xbc\xbc\x11\xe5\xab\x35\x5d\x09\x09\xb3\xf3\xee\xf6\x91\xb7\xe3\xe4\xe2\xde\x6e\xc5\xb3\x49\x92\xde\xd1\x34\xa1\xe9\x0d\x9d\xf2\xfb\xc9\x6a\xca\xff\xf7\x7d\x7e\xaa\x3a\x6d\x54\x41\x6d\x0a\xc6\x37\x0e\xf1\xb3\x0b\xde\x81\x5c\xcf\xda\x3d\x2e\xc9\xba\xa5\xab\x63\xe1\x9c\xc6\xed\x0b\x37\x8c\xd9\x8a\x49\x03\xc1\xf3\x75\xa4\xf4\xd1\x20\x30\xec\x82\xbd\xfc\x50\x82\x85\xbf\xdb\xb5\x27\xdc\x16\x3b\x03\x07\x6b\xe2\x55\x76\x86\x45\xf2\xd0\x96\xdb\x20\x7b\x4b\xad\xf4\xe1\x20\x3c\xbb\x98\xfc\x0d\xbc\xd3\xc1\xe7\x21\xf9\x66\xd4\xbc\x07\x9a\xcb\x31\x73\x81\x85\x10\x32\x58\x34\x5e\xe4\xb3\xd2\x48\xa5\xb6\x75\xe5\x2f\x78\x39\xac\x58\x2d\x6d\x64\x76\x3c\x0a\x2a\x4a\x06\xd8\x90\x1f\xe3\x1c\x76\x71\x59\xcb\xa0\xc3\x5d\xa1\x67\xc1\x9b\x71\xae\xf4\x07\x0f\xcc\xb1\xe2\xb4\xd3\xf2\xe8\x06\xf9\x66\x0f\xc0\x15\xd8\xee\xe7\x42\x67\xe4\xf9\xe5\xc8\xc3\x1f\x8c\xd5\x8d\x32\xdd\x38\xf4\x1d\x38\x33\x64\x4f\x8d\xd8\x53\x06\xcf\x4e\x30\x04\xea\x42\xe1\x0f\x00\xac\xda\xbc\xcd\xff\xe8\xdf\x00\x00\x00\xff\xff\x46\xee\x13\x6b\x41\x0e\x00\x00")

func templatesKube_dnsYamlTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesKube_dnsYamlTemplate,
		"templates/kube_dns.yaml.template",
	)
}

func templatesKube_dnsYamlTemplate() (*asset, error) {
	bytes, err := templatesKube_dnsYamlTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kube_dns.yaml.template", size: 3649, mode: os.FileMode(420), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMasterOpensslCnfTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8e\x61\x4b\xc3\x30\x10\x86\xbf\xe7\x57\xf4\x07\x8c\xb0\x6e\x8a\x20\x08\xce\x39\x41\x18\x43\x2c\x7e\x2a\xa5\xa4\xe9\xd9\x9d\xcb\xae\x33\xb9\x0c\x65\xec\xbf\x7b\xa9\x43\x10\x27\x81\x90\x7b\x9f\x97\x3c\x57\x7a\x78\xaf\x94\x5c\x35\x7c\x30\x50\xc0\x9e\x42\x76\x93\xed\xa7\xb5\x64\xaa\xc5\xc0\x48\x5d\xc4\xb0\x86\xb6\x26\xb3\x05\x61\xa9\xfc\x17\xa8\xf2\x7c\x5e\xa9\xf2\xf4\x5b\x56\xa9\xc6\x04\xb4\x73\x51\xb0\x37\x48\x9c\x4c\xf3\xd9\xf5\xc3\x6c\x59\x2c\xd4\x06\x3e\x5f\x82\xe9\x92\x81\x7a\x7a\x86\x5d\x6c\xd1\xb0\xec\x33\xca\x5a\xec\x90\x8d\x2b\xb0\x23\xc3\xd1\xc3\x28\x93\xf2\x82\x2c\xee\xd6\xe0\xb7\x40\xac\x42\x6c\xde\xc0\xf2\xcc\xf1\xea\x7b\xc9\x5b\xe3\x78\xf0\x07\x55\xfe\x3c\x2b\x75\xbf\x2a\x74\x2e\x78\x13\x1b\xf0\x04\x2c\x38\x45\x93\x5f\x91\x6e\xe1\xd5\x44\xc7\x03\x9a\x9e\x45\x3a\xec\xed\x80\x2f\xfe\xc5\xda\xba\x18\x18\xbc\x76\xbd\x35\x6e\x28\x5f\x4a\xf9\x70\xd0\x8b\xe5\x9d\x4c\x69\xd1\xe3\x51\x3d\x3e\x0d\xf6\x7c\x72\xa5\xc7\x72\xf2\x14\x24\x67\x3e\x3e\xcd\x5f\x01\x00\x00\xff\xff\x28\xe0\x21\xc5\xa2\x01\x00\x00")

func templatesMasterOpensslCnfTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesMasterOpensslCnfTemplate,
		"templates/master-openssl.cnf.template",
	)
}

func templatesMasterOpensslCnfTemplate() (*asset, error) {
	bytes, err := templatesMasterOpensslCnfTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/master-openssl.cnf.template", size: 418, mode: os.FileMode(420), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMasterUserDataTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\x5d\x73\xd3\x38\x17\xbe\xef\xaf\x38\x6f\xe0\x9d\x81\x9d\x38\x76\x4b\x81\x92\x19\x5f\x84\xc4\x40\x66\x43\xcb\x26\x29\x5c\x30\x3b\x19\x55\x56\x12\x6d\x6d\xcb\x2b\xc9\x09\x19\xb6\xff\x7d\x8f\x64\xd9\x75\x9a\xa4\xed\xee\xf2\x31\xd3\x62\xe9\xe8\x7c\x3f\x8f\x8e\x78\x42\x13\x51\xc4\x1e\x15\xd9\x9c\x2f\x8e\xd6\x92\x6b\x36\x9b\xf3\x84\xa9\xee\x11\x80\x07\x39\xd1\xcb\x2e\xf8\x85\x92\x7e\x22\x28\x49\xfc\x2b\x9e\xf9\x0b\xa6\x67\xd7\x67\x6a\x46\x99\xd4\xaa\xa3\x96\x28\x09\x20\xd6\x19\x93\x5d\x90\x42\x68\xfb\x9d\x33\x99\x72\xa5\xb8\xc8\x54\x17\x82\xd7\x2f\x5f\xda\x55\xb4\xa3\x59\xa6\xbb\xf0\x97\xfd\x04\x78\xf2\x3f\xab\xf2\x8a\xa8\x25\x78\xcc\x2d\xa6\xd7\x31\x97\xe0\xe5\xe0\x33\x4d\xfd\xeb\xe2\x8a\xc9\x8c\x69\xa6\x7c\xa5\x12\x27\xc2\x33\xa5\x49\x46\xd9\x8c\xc7\xe1\xd3\x67\xb4\x90\x09\x1c\xbf\x7a\xd3\x39\x79\x79\xda\x71\xbf\xfd\x84\xe0\x11\xed\xa7\x4c\x13\x2f\x26\x9a\xf8\xd5\x19\x8f\xc7\xcf\x9d\x1a\xb2\x56\xa0\x5e\x00\xcd\xf1\x67\xd7\xf7\xbf\x7f\xef\x4c\x26\xa3\x89\x16\x92\x2c\xd8\xdb\x82\x5e\x33\x7d\x73\x63\x56\xfb\x49\xa1\x34\x93\xe7\x24\x65\xb8\xf0\xf4\x7b\xc3\xfc\x8d\x47\x72\xae\x98\x5c\x31\xd9\xc9\x59\xba\xcf\x67\x7f\x4b\xe2\xa7\x98\xf6\xae\xd9\xe6\x61\xf3\x95\xd4\x8f\x74\x81\x92\x83\x76\xcb\x2d\x67\x8c\x2e\xb1\x45\xc0\x48\x74\xcd\x8f\xbd\x07\x7e\xd9\x92\x4f\x45\x0c\xc1\xab\x20\x78\x50\x54\x6d\xd0\xbd\x94\xea\x04\xd0\x2f\xa9\xad\x91\xdb\xd4\xdc\x27\x64\xfa\x51\x8a\x24\xc1\xd4\xa4\x24\xc3\xb0\xef\x95\x56\x74\xc9\xe2\x22\xb1\x42\x15\x36\x5a\x77\x9d\xab\xed\xb6\x76\x71\xd0\x0a\x5e\x9d\x9e\xb6\x9a\x78\x69\x19\xc0\xb4\x0e\x60\x03\xa6\x4b\x06\x24\x8e\x25\x53\x0a\x44\x06\x1a\x3f\x2d\x0c\xa1\xb4\x00\x5a\x40\xc2\xd1\x51\xdc\x12\x1d\x77\xea\xd7\xcb\xb7\xd1\xac\xf7\x69\x38\xeb\x0d\x06\xe3\x68\x32\x09\x5b\x9e\x87\x05\x63\x88\x11\xe6\x21\xd6\x62\xcf\x69\x0c\x8f\x4f\x5e\x77\x02\xfc\x7b\xdc\x3a\xaa\x2d\xf6\x45\x9a\x12\x54\x9f\x13\x89\xf0\x89\xad\x7a\x10\x73\xc8\x44\xcc\x14\xa2\xce\xfa\x80\x11\xc7\x40\xcb\xa6\x68\x5a\x8d\xa6\xfd\xc1\x6c\x12\x8d\x3f\x47\x63\x6b\xd6\xc8\x79\xa5\xab\x2a\x5c\x6a\x9d\x63\x93\xd5\x46\xbb\xa7\x41\xd0\xb4\xdc\x73\x71\x4a\x92\x2d\x98\x89\xac\x50\x0c\xe6\x42\xda\x58\x39\x45\xeb\x4d\x53\xc6\xca\xb0\x1f\x55\x41\x46\xd6\x9e\x93\xf4\x9c\x6b\x1e\xcf\x3d\xab\x2d\x34\x9d\x5d\xee\xb9\x56\x1e\x7e\x1a\x9b\x8d\x9b\x9b\x86\x03\x31\x9b\x93\x22\xd1\x98\x70\x57\x30\x70\xdd\x01\xb9\x48\x38\xe5\x4c\x6d\x65\x78\xf0\x71\x38\x99\x0c\x2f\xce\x67\xfd\x8b\xf3\xe9\xf8\x62\x64\x1c\xa8\x8f\x56\x8d\x15\x1a\xcc\xa8\x9c\x50\x36\xe2\x73\x46\x37\x34\x61\xed\x7a\x29\xfa\x86\xc9\x55\xed\x11\x4f\xb9\xb6\xee\xc8\xf6\xc4\x94\x89\xeb\x4d\xdf\xf4\xc2\x37\x3d\x60\xd9\xa6\xed\x3c\xef\x51\x2a\x8a\x4c\xb7\xc7\x4c\x89\x42\x52\xf6\x5b\x21\x34\x69\x39\x97\x9a\x59\xe4\x1a\x1d\xc0\x1e\x21\x72\xa1\x4c\x1e\x4d\xc5\xea\xa6\x84\x67\x08\xf1\xe7\x3b\xad\x32\x7e\x6f\x13\x58\x5e\x06\xb9\x14\x2b\x1e\x33\x19\x1a\x7e\xf0\x3c\x9d\x28\xcf\x50\xbd\x67\xee\x85\xf0\x41\x7a\x03\x93\x06\xfc\xb7\xc6\xb5\xba\xd5\x9e\xe6\x92\xaf\xb0\xa1\x66\x3c\x5f\x9d\x3a\x9d\x6e\xc9\x70\xd2\x23\x54\xd7\x04\x67\xbc\xe4\x88\x13\x24\x9e\xc3\xc7\x1c\x29\xdd\xb6\x04\x29\xb3\xf7\x0f\x8d\x35\xd2\x7b\x10\xef\xe5\xd5\xf9\x03\xc0\x9e\x88\xc5\x82\x67\x0b\x53\x32\xa5\x31\xfd\x12\x52\x46\x32\x05\x6b\x06\x78\xe3\x02\xd7\x15\xfc\x4a\x6e\x8a\xe1\x0f\xec\x03\x2c\x74\xb3\x98\xa3\x8b\xf7\xd3\x8b\xc9\x74\x10\x8d\xc7\xa6\x9e\xa8\x52\x8b\x52\x59\xa8\x65\xc1\x5a\xb5\x31\x77\x16\x4d\x28\x85\xb4\x07\x09\x5b\xb1\xa4\x0d\x01\x70\x85\x40\xb8\x2a\x16\x77\xb4\xce\x46\xd1\xe7\xc8\xf6\xf8\x2a\x0c\x6e\xd5\x4c\x96\xa2\x48\x62\xf4\x0a\x8f\x39\xd4\x01\x72\x3b\x49\x12\xb1\x46\xf6\xc0\x50\x64\x91\x81\xa9\x34\xe6\x7c\x81\x2b\xb1\xc0\x6b\x45\xda\xf0\x09\xc7\xa4\x6c\x63\x6a\x34\xba\xf8\x32\xfb\x34\x1e\x7e\xb6\x60\x32\x4a\xbc\xdb\xb3\x77\x22\xf8\x20\xd6\x36\x1b\xbb\x14\xde\x86\x9a\xa8\x61\x8e\x84\xb7\x8d\x80\xa6\xc1\x8f\xbd\xc9\x34\xb2\x99\x4a\x89\xf1\x7d\x97\xa4\xce\x82\xb3\x46\xb8\x11\x12\xda\x61\xc2\x73\x87\xb7\x7a\xbd\x7b\xf2\xe2\xf5\x9b\x47\xb6\xd1\x9d\x30\x7e\x40\x4b\x1d\x60\x83\x83\xb7\x9e\x0d\xca\xf1\xd9\x28\x1a\x63\x7e\xce\x7b\xef\xf1\x77\xc5\x0f\x2e\x4b\xdb\xe9\xb1\x88\x2c\x09\x97\xf2\x58\x86\xb7\x03\x43\x7f\x38\x18\xdf\xdc\x40\x59\x4a\x6a\xb0\x6e\xae\x11\x2b\xa5\x6c\x35\xe1\x00\xe5\x54\xfa\x32\xa4\xca\xf0\xee\x00\xb2\x07\xd5\xff\x92\x4a\xaa\x3f\x9e\x67\xb2\xf8\x08\x42\x69\xc1\x23\x2a\x59\x37\xdf\xcf\x2b\x60\x73\x10\xb9\xbd\x12\xfb\x1f\xa2\xc1\xe5\xe8\xa1\x72\xed\x6d\x46\x3b\xe0\xf3\x2b\xdf\x51\x8b\xfb\x6d\x22\x8b\x4f\x3a\x2e\xdb\xff\x39\x9c\xaf\x97\x19\xd7\xbf\xbb\x8f\x01\x53\x54\xf2\xdc\x04\x17\xda\x79\xc2\xd4\x6e\x45\x12\x6c\x0a\x85\x13\x68\xf5\x14\x18\x08\x5a\xa4\xa8\x85\x58\x41\x83\x30\x85\x10\x5b\x70\xbd\x2c\xae\x3a\x54\xa4\x88\x1b\xc9\x84\xb2\x9e\x56\x66\xdc\x85\x59\x59\x9a\xf2\x94\x89\x42\x4f\xcc\x1c\x87\xf7\x6b\x18\xb8\xf5\x4b\x8c\x2b\x6c\x9c\x9b\x6e\x72\x16\x66\x42\xf3\xf9\xc6\xad\x44\xd9\x8a\x4b\x91\x19\xfb\xa1\x85\xfa\xa0\x37\xed\xcd\x06\xc3\x71\xe8\xaf\x48\x99\xb0\xc6\xf9\x1d\xe9\xf3\xde\xc7\x28\xfc\xff\x87\xdd\xed\x77\xa6\xcb\x3c\xdb\x37\xe6\xf6\xe8\xc4\x5b\x6a\xbe\x31\x6a\x7d\x0d\x6d\x55\xcc\xeb\xa8\xb1\x8b\xb7\xbf\xdd\x23\xc9\x9a\x6c\xd4\xf6\xa2\x09\xee\x38\xa8\x16\xed\x58\x71\x7e\xf1\x6e\x38\x8a\x42\x1c\xb5\x82\x2a\xec\xaf\x43\x33\xbd\x27\x49\x95\x9e\x2f\x04\xcb\x14\xbf\xdd\x84\x29\x0e\x3f\xdc\xc3\xa9\x4b\x76\x50\x1b\x5e\x39\x47\x65\x6e\xcd\x4b\xd0\x36\x42\xd7\x9e\x88\xb9\xa2\x02\x51\xb4\xe9\x02\x22\x73\x50\x7d\x21\x2e\xed\xf6\xed\xdd\xef\xae\x69\x7c\x9a\x61\xa7\x1c\xe4\xc6\xf6\xde\x1d\x33\x1b\x5a\x75\x1c\x5b\x86\x93\xa4\x31\x52\xe4\x0c\x11\x7c\xaf\xd2\xb3\x32\xd4\x72\x32\xde\xeb\x46\x60\xf1\x10\x6c\x39\x50\xad\xd5\xa6\xdd\xf9\x47\xda\x2b\xd0\x51\x55\x66\xc8\x03\xc3\x5b\x5d\xd8\x42\x4f\xf5\xaa\x31\xf3\x75\x16\x77\xcb\x67\xc5\x96\x38\x66\xdc\xc3\x67\xb5\xe7\x9e\xd5\x0f\x1d\xdb\x03\xb0\x3b\x10\xdb\x06\x99\x99\x21\x50\x3d\x58\xf5\x30\x97\x22\xc5\x57\x5f\x2d\x39\x66\x7f\x16\x1c\x47\xb5\x70\x9f\xd3\x00\xbd\xb9\x21\x12\xe4\xb7\xb5\x90\xd7\xae\x3d\xf6\xc6\xb7\x0b\x3f\x07\x2c\x91\x31\xb5\x14\xba\x5e\xbc\xd3\xe6\xf7\xfc\xef\xc2\xdf\x01\x00\x00\xff\xff\x23\xef\x95\xac\xa3\x10\x00\x00")

func templatesMasterUserDataTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesMasterUserDataTemplate,
		"templates/master-user-data.template",
	)
}

func templatesMasterUserDataTemplate() (*asset, error) {
	bytes, err := templatesMasterUserDataTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/master-user-data.template", size: 4259, mode: os.FileMode(493), modTime: time.Unix(1470691306, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMinionOpensslCnfTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\xc1\x4a\x03\x31\x10\x86\xef\xf3\x14\x79\x80\x52\x10\x6f\x82\xe0\x52\x2a\x14\x44\x8a\x45\x3c\x84\xb0\x4c\x37\x43\x3a\x76\x3b\x5b\x33\x13\x51\x96\x7d\x77\xb3\x2a\x5e\xec\x25\x84\xff\xfb\x99\xef\xf7\x99\xde\x02\xd4\xa7\xa5\x0f\x23\x51\x1e\x44\xdd\xad\x7b\xbf\x6e\x6b\x06\x91\xd5\x58\x52\x61\x3d\x50\x6c\x05\x4f\x54\xd9\x5c\xfe\x0f\xc0\x5f\xce\x03\xf8\xdf\x6b\x2e\xc0\x1e\x95\xbb\x55\x55\x58\x46\x16\x9b\x4d\xab\xe6\xe6\xbe\x79\xd8\xad\xe1\x48\x9f\xcf\x8a\x69\x36\xc8\x20\x4f\x74\x2e\x91\xd1\xea\x9e\x85\x8b\x9c\xd8\xb0\xdf\x71\x12\xb4\x92\x69\xe1\x6a\x79\x2d\x1d\x9f\x0f\x94\x4f\x24\x06\x5a\xf6\xaf\xd4\x59\xd3\xdb\xe3\xcf\xc8\x3b\xec\xed\xdb\xaf\xe0\xff\xbe\x01\x36\xdb\xe5\x55\xa5\xe3\xb8\x7c\x19\xf2\x91\xf2\x66\x3b\x4d\xf0\x15\x00\x00\xff\xff\x22\xc5\x70\x42\x04\x01\x00\x00")

func templatesMinionOpensslCnfTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesMinionOpensslCnfTemplate,
		"templates/minion-openssl.cnf.template",
	)
}

func templatesMinionOpensslCnfTemplate() (*asset, error) {
	bytes, err := templatesMinionOpensslCnfTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/minion-openssl.cnf.template", size: 260, mode: os.FileMode(420), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMinionUserDataTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x5b\x6f\xdb\x36\x14\x7e\xef\xaf\xe0\xd2\x3e\x6c\xc3\x68\xb9\x5b\xd3\x76\x06\xf8\xe0\xc4\x6a\x1b\xcc\x8d\x03\xcb\x4d\x37\x14\x83\x41\x4b\xc7\x36\x67\x4a\x54\x49\xca\x8e\x91\xe5\xbf\xef\x90\x92\x2c\x5f\x12\x67\x40\x2e\x80\x0d\x1e\x9e\xeb\x77\x6e\xf4\xcb\x58\xaa\x22\xa1\xb1\xca\xa6\x62\xf6\x62\xa5\x85\x85\xf1\x54\x48\x30\x9d\x17\x84\x50\x92\x73\x3b\xef\x90\xa0\x30\x3a\x90\x2a\xe6\x32\x98\x88\x2c\x98\x81\x1d\x2f\xde\x9b\x71\x0c\xda\x9a\x96\x99\x23\x27\x21\x6a\x95\x81\xee\x10\xad\x94\xf5\xe7\x1c\x74\x2a\x8c\x11\x2a\x33\x1d\xd2\x7e\x77\x7a\xea\xa9\x68\xc7\x42\x66\x3b\xe4\x5f\x7f\x24\xe4\xe5\x0f\x5e\xe5\x84\x9b\x39\xa1\x50\x11\xd3\x45\x22\x34\xa1\x39\x09\xc0\xc6\xc1\xa2\x98\x80\xce\xc0\x82\x09\x8c\x91\x15\x8b\xc8\x8c\xe5\x59\x0c\x63\x91\xb0\x57\x3f\xc6\x85\x96\xe4\xf5\xdb\xdf\x5b\xbf\x9e\xbe\x69\x55\xdf\x81\xe4\x28\x62\x83\x14\x2c\xa7\x09\xb7\x3c\xa8\x65\xa8\x48\x7e\xaa\xd4\xf0\x95\x21\xe6\x37\x12\xe7\xf8\xd9\x09\x82\xdb\xdb\x56\x14\xf5\x23\xab\x34\x9f\xc1\x59\x11\x2f\xc0\xde\xdd\x39\xea\xb9\x2c\x8c\x05\x7d\xc9\x53\x40\xc2\xab\xdb\x2d\xf3\x77\x34\x15\x19\x86\xd9\xca\x21\xbd\xcf\xe1\xa0\xb9\x7e\x7e\xa3\x74\x01\xeb\x47\x0c\xd7\x2c\xcf\x69\x3c\xe6\x0f\x1a\x2d\xaf\x2a\x63\xf1\x1c\xcb\x82\x38\x8e\x8e\xfb\xb8\x57\xe0\xe7\x1d\xfe\x54\x25\xa4\xfd\xb6\xdd\x7e\x94\xd5\xac\xd1\xbd\x34\xb6\x92\xa0\x5f\xda\x7a\x23\x12\xec\x91\x5b\x9a\x6b\x75\xb3\xde\x2e\xeb\x3d\x13\x55\x13\x3c\xa1\x9a\xff\xf8\x72\x16\x8e\xfb\x83\x8f\xa3\x41\x34\xea\x85\xc3\x21\x3b\xa1\x54\xaa\x99\x55\xc6\x26\xa0\x35\xb3\xba\x80\x93\xba\xf2\xc9\x3f\xaa\xd0\x19\x97\x24\x05\x63\x10\x7d\x22\x61\x09\xf2\x17\xd2\x26\xc2\x90\x04\x26\xc5\x6c\x4f\xeb\xb8\x1f\x5e\x87\x7d\xa7\x73\xc9\xda\x27\xdb\x97\xdd\x7e\x7f\xf0\x75\x7c\x35\xbc\xb8\x76\xb7\x5c\x4a\xb5\xc2\x68\xc5\x12\x1b\x79\x06\xc9\x8e\x59\xcf\xff\xb9\x1b\x8d\x42\xf4\x6e\x6e\x6d\x6e\xca\x2a\x08\xfb\x67\xbd\xcb\xa8\x4c\xf7\xc9\x11\x90\xb6\x71\x7e\x02\x4a\xfd\x70\x34\xee\xf6\x7a\xc3\x30\x8a\xbc\xcb\x49\xa2\x11\x05\xf6\xca\x79\x8d\x7d\x3b\x16\xf9\xf2\xcd\xc9\x1e\xff\x27\x44\xf5\xb2\xfb\x39\x74\x02\x73\x84\x34\x43\x67\xa9\x5a\x22\xb0\x22\x81\xe3\xa2\xdd\xab\x8b\x71\x14\x0e\xaf\x43\x9f\x12\x9e\x0b\x6a\x40\xa3\xa4\x61\x47\x20\xd8\x51\x30\xfc\xe8\x1d\x2d\xc7\x25\x56\xd2\x12\x6d\x6a\xe6\xba\x89\x52\x87\x49\x59\x3c\x2c\x58\x72\x1c\x95\x62\x52\xe3\x14\x34\x77\xc8\x98\x61\x3b\xa6\xdc\x7c\x2f\x40\xf3\x04\x68\x2c\x12\xcd\x5e\xb7\x5b\xfe\x3f\x78\x4f\x9c\x7a\xdf\x75\x34\xc9\x0c\x6b\x9a\x10\xbd\xba\xbb\x73\xb7\x5e\x4f\xa1\x51\x72\xa2\xdb\x3e\xad\xdb\x32\x2a\xe5\x22\x63\xd5\xb1\xe5\xe7\x35\x5e\x5b\x69\xa8\x9b\xd4\xd4\x8d\x75\x76\x7c\x40\x55\xec\x15\x92\x6e\x72\x3c\x26\x55\x4f\x97\x63\x25\x53\xf7\xdd\xd3\xda\xea\x6a\x38\xf8\xf3\xaf\xad\x3c\x94\x41\x7b\x08\x1b\xa4\xce\x2f\x7a\x43\x0f\x95\xb7\x49\x71\x9a\x00\x13\xb9\xe5\x13\xdc\x68\xff\x3b\x51\x3b\xb1\x3c\xcc\xf6\x94\x88\xb0\x02\xaf\xb1\xfa\x90\xad\x43\x96\xaf\x2b\xe2\x42\x64\x49\x87\x9c\x37\xca\x51\xb0\x0c\xcb\x6f\xe3\xf2\x8f\xd6\xb4\x86\xe4\x19\x31\xc3\x62\x2a\x62\x97\x36\x5e\xd8\xb9\xc2\x4d\xbe\x3e\x4c\xc5\xc1\x84\xae\xc6\xa5\x6f\x86\x0e\x79\xa0\x19\xb6\x78\x5d\xcf\x75\x48\xa3\xb1\xf6\xd3\x05\x78\x63\x77\xfd\x2c\x69\x7b\x7e\x56\xce\x1f\xaa\x28\xff\x0a\x53\x5f\x36\xc3\x7c\xd7\x2e\xd2\xa9\x55\xf4\xd0\x85\x42\x6b\xc4\x98\xd6\x66\x8f\x32\x3b\x33\x3b\xce\xee\xe8\x7f\xb1\xe7\xcf\x5e\x04\xc2\x9b\x69\x00\xbf\x1f\xe6\x83\xb5\xbf\x23\x8e\x6d\x73\x4c\x6c\xb3\xb4\x63\xa5\x41\x79\x4f\x8b\x4c\xd4\xf8\xd6\xee\x26\x0a\xf7\xb5\x6e\xb9\xec\x89\x18\x36\xa9\x48\x53\xee\x0a\xc9\x6f\xbe\xed\xfc\x6c\x17\x20\x21\xdf\xbe\xa0\xc2\xbf\x37\xc7\x1e\x98\x58\x63\xab\xa0\x71\xd6\xf3\x7a\x49\x37\xcf\xa5\x0b\x10\x49\xae\x2a\x2d\x4e\x17\xa4\x86\xd9\x0c\xbf\x1b\x39\x15\x17\x29\xaa\xf6\x6c\x9b\x69\x8a\x9e\x99\x56\xe5\x1e\x3a\xb4\xe1\xee\x4e\x31\xf9\x0c\xa3\x5d\x29\xbd\x68\xa1\x83\xf8\x96\xdc\x84\xe1\xbe\x1a\xec\x87\xf0\xbd\x10\xb8\x14\xd8\xfd\xd7\xdf\xa2\x32\xea\x26\x82\xd1\x3a\x07\x96\x29\xcc\xca\x7a\x43\x0b\x6f\x20\x8e\x1c\x0e\x57\x1a\x18\xf5\xef\x58\xff\xdc\xd4\xee\x69\x80\x4b\x67\xa2\x89\x1b\xa5\x87\xfc\x6c\xc3\x5b\x9a\x27\x09\x87\x14\x71\xa0\x9f\xc8\x34\xc1\x00\x09\x35\xcc\xad\x1e\xc9\xd7\x38\x57\x26\xb8\x81\x66\xc0\x9c\x2a\x3c\xd5\x03\x87\x4d\xb9\x34\xe0\x09\x7e\xea\x6f\xce\xf8\x24\xa0\x7e\xd9\xb3\x15\xd7\x19\xd9\x58\xff\xac\x8a\xcc\x7e\x90\x7c\x66\x98\x91\x7c\xd9\x80\xdc\x17\xa9\xb0\x97\x83\x0f\x17\xfd\x10\xf7\xc5\x9b\xf7\xa7\xef\xde\xee\xdd\xe1\x74\x3c\xbf\xff\xea\x7c\x30\x0c\x99\xc0\x99\x82\xe9\x6e\x80\x19\x89\x14\x54\x61\x7d\xac\x11\xc4\xac\xbd\x55\x08\xf8\x68\xc0\xaa\x66\xeb\xad\xd6\xfc\x76\xe1\x9e\x7f\x52\x36\x68\x7f\xe5\x58\x51\xc9\xd9\x9a\xa5\x85\xb4\x82\xba\x3e\xa9\xf2\xb9\x53\xa2\x78\xa6\xf8\x5b\x81\x56\xbf\x15\x9e\xbb\x52\x5d\xf9\xa0\x7a\x3f\xfe\x0c\x99\x6a\x95\xe2\xb3\xf6\x68\xb5\x3d\x56\x40\x2a\x03\x33\x57\xf6\xa1\x8a\x78\xf8\x57\xd0\x7f\x01\x00\x00\xff\xff\xfd\x68\xda\xf1\x4a\x0d\x00\x00")

func templatesMinionUserDataTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesMinionUserDataTemplate,
		"templates/minion-user-data.template",
	)
}

func templatesMinionUserDataTemplate() (*asset, error) {
	bytes, err := templatesMinionUserDataTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/minion-user-data.template", size: 3402, mode: os.FileMode(493), modTime: time.Unix(1470691335, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8s_certsGenerate_admin_keypairSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\x41\x0e\x82\x40\x0c\x45\xf7\x9c\xa2\xe2\xba\x40\x8c\x26\xb2\x70\x41\x66\xef\x1d\x3a\x43\xa3\x23\x50\x70\x0a\x51\x6e\xaf\x60\x02\xc4\x6e\x5f\xff\x7b\xfb\x5d\x6a\xbd\xa4\x96\xf4\x1e\x45\x6d\xc7\xa2\x5a\xc3\x8d\x25\x28\x01\xb6\x43\x0f\x54\x36\x5e\xb0\xe2\x31\xe9\xb8\x81\x43\x76\x3c\x2f\x6f\x81\x9f\x80\xc2\x2f\x98\xf0\xdf\xe3\xba\x4d\x9c\x06\x40\x1d\xec\x03\xe2\xd4\x5c\x2f\xd5\x60\x19\x67\x12\x2f\xa6\xf7\x29\xcb\x01\x67\x9f\x97\xed\xcc\x14\xe0\xe8\x27\x34\xc5\x54\x71\xb4\x26\x4c\xe1\x02\x53\xcf\xca\xc1\x53\xbd\x4d\xce\xb8\xa4\x51\x21\xff\x5e\xf4\x09\x00\x00\xff\xff\x47\x01\xe0\xf2\xe5\x00\x00\x00")

func k8s_certsGenerate_admin_keypairShBytes() ([]byte, error) {
	return bindataRead(
		_k8s_certsGenerate_admin_keypairSh,
		"k8s_certs/generate_admin_keypair.sh",
	)
}

func k8s_certsGenerate_admin_keypairSh() (*asset, error) {
	bytes, err := k8s_certsGenerate_admin_keypairShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s_certs/generate_admin_keypair.sh", size: 229, mode: os.FileMode(493), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8s_certsGenerate_api_keypairSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8e\xb1\x52\x85\x40\x0c\x45\xfb\xf7\x15\xf1\x59\x07\x18\x11\x47\x0b\x0b\x66\x7b\x7f\xc1\xc9\xae\x01\x57\x30\x8b\x1b\x40\xf8\x7b\x01\x1d\x54\x46\xdb\xdc\x9b\x7b\xce\xe5\x45\x6a\xbd\xa4\x96\xf4\xf9\x74\x0a\x1d\x8b\x6a\x0b\x35\x4b\x54\x02\x0c\x43\x0f\xd4\x79\xe5\x38\x72\xc4\x86\xe7\xa4\xe3\x57\xb8\xca\xae\x6f\xf7\x6a\xe4\x37\x40\xe1\x77\x58\xe3\x3f\xca\xbf\x37\x12\xa7\x11\x50\x07\xfb\x02\xe7\xd4\x3c\xdc\x37\x83\x65\xdc\xd3\x33\xa0\x0b\x52\xf9\xfa\xc7\xce\x17\x27\x71\x52\xed\xcc\xa9\xc8\xee\x00\x37\xb2\x97\xe3\xb8\x29\xc1\xd1\x27\xda\x94\xab\x93\xa3\x6f\x19\x53\xba\xc8\xd4\xf3\xf2\xe0\xa9\x3d\xca\x6d\x95\x27\x9a\x15\xf2\x9b\x02\x90\xa7\x7e\xe1\xf9\x20\x0a\x63\xfe\xb8\xe1\x96\x53\xe5\x5b\xfe\xc7\xef\x23\x00\x00\xff\xff\xa3\xc1\xb7\xae\x4c\x01\x00\x00")

func k8s_certsGenerate_api_keypairShBytes() ([]byte, error) {
	return bindataRead(
		_k8s_certsGenerate_api_keypairSh,
		"k8s_certs/generate_api_keypair.sh",
	)
}

func k8s_certsGenerate_api_keypairSh() (*asset, error) {
	bytes, err := k8s_certsGenerate_api_keypairShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s_certs/generate_api_keypair.sh", size: 332, mode: os.FileMode(493), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8s_certsGenerate_caSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\xd4\x4f\xca\xcc\xd3\x4f\x4a\x2c\xce\xe0\xe2\xca\x2f\x48\xcd\x2b\x2e\xce\x51\x48\x4f\xcd\x2b\x2a\x4e\x54\xd0\xcd\x2f\x2d\x51\x48\x4e\xd4\xcd\x4e\xad\xd4\x2b\x48\xcd\x55\x30\x32\x30\xb1\x80\xab\x29\x4a\x2d\x54\xd0\xad\x30\x35\xb0\x54\xd0\xcd\x4b\x2d\x07\x12\xf9\x29\xa9\xc5\x0a\x20\xb5\xc8\x5a\x74\x53\x12\x2b\x8b\x15\x0c\x0d\x80\x00\x66\x1c\x44\xbc\xb8\x34\x29\x4b\x41\x49\xdf\xd9\xcf\x36\xbb\x34\x29\x55\x37\x39\x51\x89\x0b\x10\x00\x00\xff\xff\xd2\x43\x2c\x84\x8b\x00\x00\x00")

func k8s_certsGenerate_caShBytes() ([]byte, error) {
	return bindataRead(
		_k8s_certsGenerate_caSh,
		"k8s_certs/generate_ca.sh",
	)
}

func k8s_certsGenerate_caSh() (*asset, error) {
	bytes, err := k8s_certsGenerate_caShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s_certs/generate_ca.sh", size: 139, mode: os.FileMode(493), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8s_certsGenerate_minion_keypairSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\x4d\x92\x82\x30\x10\x85\xf7\x73\x8a\x1e\x66\x1d\xa0\x66\xc6\x2a\x59\xb8\xa0\xb2\xf7\x0a\x56\x88\x0d\x46\xa1\x83\x69\x50\xb8\xbd\x01\x14\xc5\xb2\x97\xfd\x7e\xbe\xf7\xf3\x1d\x65\x86\xa2\x4c\xf1\xe1\xcb\xd6\x48\xcc\x25\x14\x48\x8e\x15\x08\xdb\x36\x50\x19\x32\x96\xc4\x09\xfb\xb0\xc6\x0a\x7e\xe3\xff\xf5\xec\x73\x78\x06\x41\x78\x85\x41\x7e\x77\xbe\xa4\x43\xcd\x0e\x04\xb7\xd9\x11\x82\x48\x6e\x37\xd3\x37\x00\xa1\x2d\xe5\xa6\x78\x24\xef\xb5\xa1\xa6\x7c\x46\x74\xab\x38\x01\x31\x82\x0c\x2d\xea\x64\x0a\x5a\x4d\x24\x99\x0e\x7c\xad\x9e\x6c\x99\x6a\x87\xaa\x41\x46\x67\x54\xb9\xd8\x32\xea\x7b\xd5\x33\x24\xfe\x40\x60\xd7\x78\x94\x57\x18\x2e\x7f\xbb\x91\xe4\x5f\xb9\x29\xf1\xd3\xae\x5b\x00\x00\x00\xff\xff\x41\x9d\xd6\x24\x2f\x01\x00\x00")

func k8s_certsGenerate_minion_keypairShBytes() ([]byte, error) {
	return bindataRead(
		_k8s_certsGenerate_minion_keypairSh,
		"k8s_certs/generate_minion_keypair.sh",
	)
}

func k8s_certsGenerate_minion_keypairSh() (*asset, error) {
	bytes, err := k8s_certsGenerate_minion_keypairShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s_certs/generate_minion_keypair.sh", size: 303, mode: os.FileMode(493), modTime: time.Unix(1469477119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
	"templates/assume-role-policy-document.json": templatesAssumeRolePolicyDocumentJson,
	"templates/dot-kube-config.template": templatesDotKubeConfigTemplate,
	"templates/kube-master-iam-policy.json": templatesKubeMasterIamPolicyJson,
	"templates/kube-minion-iam-policy.json": templatesKubeMinionIamPolicyJson,
	"templates/kube_dns.yaml.template": templatesKube_dnsYamlTemplate,
	"templates/master-openssl.cnf.template": templatesMasterOpensslCnfTemplate,
	"templates/master-user-data.template": templatesMasterUserDataTemplate,
	"templates/minion-openssl.cnf.template": templatesMinionOpensslCnfTemplate,
	"templates/minion-user-data.template": templatesMinionUserDataTemplate,
	"k8s_certs/generate_admin_keypair.sh": k8s_certsGenerate_admin_keypairSh,
	"k8s_certs/generate_api_keypair.sh": k8s_certsGenerate_api_keypairSh,
	"k8s_certs/generate_ca.sh": k8s_certsGenerate_caSh,
	"k8s_certs/generate_minion_keypair.sh": k8s_certsGenerate_minion_keypairSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
	"k8s_certs": &bintree{nil, map[string]*bintree{
		"generate_admin_keypair.sh": &bintree{k8s_certsGenerate_admin_keypairSh, map[string]*bintree{}},
		"generate_api_keypair.sh": &bintree{k8s_certsGenerate_api_keypairSh, map[string]*bintree{}},
		"generate_ca.sh": &bintree{k8s_certsGenerate_caSh, map[string]*bintree{}},
		"generate_minion_keypair.sh": &bintree{k8s_certsGenerate_minion_keypairSh, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"assume-role-policy-document.json": &bintree{templatesAssumeRolePolicyDocumentJson, map[string]*bintree{}},
		"dot-kube-config.template": &bintree{templatesDotKubeConfigTemplate, map[string]*bintree{}},
		"kube-master-iam-policy.json": &bintree{templatesKubeMasterIamPolicyJson, map[string]*bintree{}},
		"kube-minion-iam-policy.json": &bintree{templatesKubeMinionIamPolicyJson, map[string]*bintree{}},
		"kube_dns.yaml.template": &bintree{templatesKube_dnsYamlTemplate, map[string]*bintree{}},
		"master-openssl.cnf.template": &bintree{templatesMasterOpensslCnfTemplate, map[string]*bintree{}},
		"master-user-data.template": &bintree{templatesMasterUserDataTemplate, map[string]*bintree{}},
		"minion-openssl.cnf.template": &bintree{templatesMinionOpensslCnfTemplate, map[string]*bintree{}},
		"minion-user-data.template": &bintree{templatesMinionUserDataTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

